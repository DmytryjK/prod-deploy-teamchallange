{"version":3,"file":"static/js/771.62302459.chunk.js","mappings":"2NAYA,MA4DA,EA5DuBA,KACnB,MAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,OACX,OAAEC,EAAM,IAAEC,IAAQC,EAAAA,EAAAA,OAElB,aAAEC,EAAY,kBAAEC,EAAiB,gBAAEC,IAAoBC,EAAAA,EAAAA,IACxDC,GAAUA,EAAMC,OAgCrB,OA7BAC,EAAAA,EAAAA,YAAU,KACN,GAAIT,EAAQ,CACR,MAAMU,EAAcV,EACfW,QAAQ,SAAU,IAClBC,UAAU,EAAGZ,EAAOW,QAAQ,SAAU,IAAIE,QAAQ,MACvDjB,GAASkB,EAAAA,EAAAA,IAAWJ,GACxB,IACD,CAACV,KAEJS,EAAAA,EAAAA,YAAU,KACe,cAAjBN,GACAY,YAAW,KACPjB,EACIkB,aAAaC,QAAQ,sBAAqB,GAAAC,OACjCF,aAAaC,QAAQ,uBACxB,IACT,GACF,MAEHZ,GACAU,YAAW,KACPjB,EACIkB,aAAaC,QAAQ,sBAAqB,GAAAC,OACjCF,aAAaC,QAAQ,uBACxB,IACT,GACF,IACP,GACD,CAACd,EAAcE,KAEdc,EAAAA,EAAAA,KAAA,WAASC,UAAU,cAAaC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,qBAAoBC,SAAC,iGACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6BAA4BC,SAAA,CACrB,cAAjBlB,GACGgB,EAAAA,EAAAA,KAACI,EAAAA,EAAc,CAACC,KAAK,6JAErB,GAEmB,YAAtBpB,GAAkCe,EAAAA,EAAAA,KAACM,EAAAA,EAAM,IAAM,GAC/CpB,GACGc,EAAAA,EAAAA,KAACO,EAAAA,EAAiB,CAACF,KAAK,0MAExB,UAIN,C,kDCrClB,MACA,EAAe,IAA0B,gE,aC7BzC,MAwBA,EAxB0BG,IAMnB,IANoB,KACvBH,EAAI,eACJI,GAIHD,EACG,OACIL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAsBS,IAAKC,EAAYC,IAAI,MAC1DZ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,sBAAqBC,SAAEG,OAEvCI,GACGT,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iCAAgCC,SACxCO,IAGL,KAEF,ECYd,MACA,EAAe,IAA0B,iECLzC,EA5BuBD,IAMhB,IANiB,KACpBH,EAAI,eACJI,GAIHD,EACG,OACIL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,OACIC,UAAU,wBACVS,IAAKG,EACLD,IAAI,MAERZ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAEG,OAEzCI,GACGT,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAAkCC,SAC1CO,IAGL,KAEF,C","sources":["pages/GoogleAuthPage/GoogleAuthPage.tsx","assets/icons/userMessages/failed_icon.svg","shared-components/UserMessages/ErrorMessageSmall/ErrorMessageSmall.tsx","assets/icons/userMessages/success_icon.svg","shared-components/UserMessages/SuccessMessage/SuccessMessage.tsx"],"sourcesContent":["import { useLocation, useNavigate } from 'react-router';\r\nimport { useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport { googleAuth } from '../../store/reducers/authSlice';\r\nimport {\r\n    ErrorMessageSmall,\r\n    SuccessMessage,\r\n} from '../../shared-components/UserMessages/UserMessages';\r\nimport ErrorMessage from '../../shared-components/UserMessages/ErrorMessage';\r\nimport './GoogleAuthPage.scss';\r\nimport Loader from '../../shared-components/Loader';\r\n\r\nconst GoogleAuthPage = () => {\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n    const { search, key } = useLocation();\r\n\r\n    const { loginLoading, googleAuthLoading, googleAuthError } = useAppSelector(\r\n        (state) => state.auth\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (search) {\r\n            const currentCode = search\r\n                .replace('?code=', '')\r\n                .substring(0, search.replace('?code=', '').indexOf('&'));\r\n            dispatch(googleAuth(currentCode));\r\n        }\r\n    }, [search]);\r\n\r\n    useEffect(() => {\r\n        if (loginLoading === 'succeeded') {\r\n            setTimeout(() => {\r\n                navigate(\r\n                    localStorage.getItem('googleAuthLocation')\r\n                        ? `${localStorage.getItem('googleAuthLocation')}`\r\n                        : '/'\r\n                );\r\n            }, 1500);\r\n        }\r\n        if (googleAuthError) {\r\n            setTimeout(() => {\r\n                navigate(\r\n                    localStorage.getItem('googleAuthLocation')\r\n                        ? `${localStorage.getItem('googleAuthLocation')}`\r\n                        : '/'\r\n                );\r\n            }, 3000);\r\n        }\r\n    }, [loginLoading, googleAuthError]);\r\n    return (\r\n        <section className=\"google-auth\">\r\n            <div className=\"container\">\r\n                <h1 className=\"google-auth__title\">Гугл авторизація</h1>\r\n                <div className=\"google-auth__notifications\">\r\n                    {loginLoading === 'succeeded' ? (\r\n                        <SuccessMessage text=\"Авторизація пройшла успішно\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    {googleAuthLoading === 'pending' ? <Loader /> : ''}\r\n                    {googleAuthError ? (\r\n                        <ErrorMessageSmall text=\"Помилка авторизації, спробуйте ще раз\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default GoogleAuthPage;\r\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgFailedIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 25,\n    height: 24,\n    viewBox: \"0 0 25 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z\",\n    stroke: \"#EB3D3D\",\n    strokeWidth: 1.5\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 12.5L11 14.5L16 9.5\",\n    stroke: \"#EB3D3D\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgFailedIcon);\nexport default __webpack_public_path__ + \"static/media/failed_icon.90b0262963badfaf68639a5de2c134fc.svg\";\nexport { ForwardRef as ReactComponent };","import failedIcon from '../../../assets/icons/userMessages/failed_icon.svg';\r\nimport './ErrorMessageSmall.scss';\r\n\r\nconst ErrorMessageSmall = ({\r\n    text,\r\n    additionalText,\r\n}: {\r\n    text: string;\r\n    additionalText?: string;\r\n}) => {\r\n    return (\r\n        <div className=\"error-message_small\">\r\n            <div className=\"error-message_small-inner\">\r\n                <img className=\"error-message__icon\" src={failedIcon} alt=\"\" />\r\n                <p className=\"error-message__text\">{text}</p>\r\n            </div>\r\n            {additionalText ? (\r\n                <p className=\"error-message__text_additional\">\r\n                    {additionalText}\r\n                </p>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMessageSmall;\r\n","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSuccessIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 22,\n    viewBox: \"0 0 22 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M11 21C16.5228 21 21 16.5228 21 11C21 5.47715 16.5228 1 11 1C5.47715 1 1 5.47715 1 11C1 16.5228 5.47715 21 11 21Z\",\n    stroke: \"#64CB13\",\n    strokeWidth: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M7.5 11.5L9.5 13.5L14.5 8.5\",\n    stroke: \"#64CB13\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSuccessIcon);\nexport default __webpack_public_path__ + \"static/media/success_icon.df18252c1db27be830794938583fba2e.svg\";\nexport { ForwardRef as ReactComponent };","import successIcon from '../../../assets/icons/userMessages/success_icon.svg';\r\nimport './SuccessMessage.scss';\r\n\r\nconst SuccessMessage = ({\r\n    text,\r\n    additionalText,\r\n}: {\r\n    text: string;\r\n    additionalText?: string;\r\n}) => {\r\n    return (\r\n        <div className=\"success-message\">\r\n            <div className=\"success-message__inner\">\r\n                <img\r\n                    className=\"success-message__icon\"\r\n                    src={successIcon}\r\n                    alt=\"\"\r\n                />\r\n                <p className=\"success-message__text\">{text}</p>\r\n            </div>\r\n            {additionalText ? (\r\n                <p className=\"success-message__text_additional\">\r\n                    {additionalText}\r\n                </p>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SuccessMessage;\r\n"],"names":["GoogleAuthPage","dispatch","useAppDispatch","navigate","useNavigate","search","key","useLocation","loginLoading","googleAuthLoading","googleAuthError","useAppSelector","state","auth","useEffect","currentCode","replace","substring","indexOf","googleAuth","setTimeout","localStorage","getItem","concat","_jsx","className","children","_jsxs","SuccessMessage","text","Loader","ErrorMessageSmall","_ref","additionalText","src","failedIcon","alt","successIcon"],"sourceRoot":""}