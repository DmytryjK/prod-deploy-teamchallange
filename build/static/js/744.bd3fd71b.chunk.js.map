{"version":3,"file":"static/js/744.bd3fd71b.chunk.js","mappings":"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","sources":["pages/CheckoutPage/shared-components/SubmitButton/SubmitButton.tsx","pages/CheckoutPage/components/ResetPassword/ResetPassword.tsx","pages/CheckoutPage/components/DeliveryAndPaymentForm/PaymentMethod/PaymentMethod.tsx","pages/CheckoutPage/components/DeliveryAndPaymentForm/AddressDelivery/AddressDelivery.tsx","shared-components/FormComponents/CustomSelect/CustomSelect.tsx","pages/CheckoutPage/components/DeliveryAndPaymentForm/CompanyDelivery/CompanyDelivery.tsx","pages/CheckoutPage/components/DeliveryAndPaymentForm/DeliveryAndPaymentForm.tsx","pages/CheckoutPage/components/ProductsList/ProductsList.tsx","pages/CheckoutPage/components/CustomerForm/CustomerForm.tsx","pages/CheckoutPage/components/RegularCustomerAuth/RegularCustomerAuth.tsx","pages/CheckoutPage/components/FormUpdater/FormUpdater.tsx","pages/CheckoutPage/CheckoutPage.tsx","shared-components/Breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import './SubmitButton.scss';\r\n\r\ntype Props = {\r\n    title: string;\r\n    onClick?: () => void;\r\n    className?: string;\r\n};\r\n\r\nconst SubmitButton = ({ title, onClick, className }: Props) => {\r\n    return (\r\n        <button\r\n            className={`submit-button ${className || ''}`}\r\n            type=\"submit\"\r\n            onClick={() => {\r\n                if (onClick) {\r\n                    onClick();\r\n                }\r\n            }}\r\n        >\r\n            {title}\r\n            <span className=\"submit-button__loading-dots\">\r\n                <span className=\"submit-button__loading-dot\" />\r\n                <span className=\"submit-button__loading-dot\" />\r\n                <span className=\"submit-button__loading-dot\" />\r\n            </span>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default SubmitButton;\r\n","import { useState } from 'react';\r\nimport SubmitButton from '../../shared-components/SubmitButton/SubmitButton';\r\nimport './ResetPassword.scss';\r\nimport Modal from '../../../../shared-components/Modal/Modal';\r\n\r\ntype Props = {\r\n    setResetPasswordActive: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst ResetPassword = (props: Props) => {\r\n    const [modalIsActive, setModalIsActive] = useState(false);\r\n    const { setResetPasswordActive } = props;\r\n    return (\r\n        <>\r\n            <div className=\"reset-password\">\r\n                <div className=\"reset-password__form\">\r\n                    <form className=\"customer-form\">\r\n                        <label htmlFor=\"\" className=\"customer-form__item\">\r\n                            <p>E-mail</p>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"example@gmail.com\"\r\n                                className=\"customer-form__item_input\"\r\n                            />\r\n                        </label>\r\n                    </form>\r\n                </div>\r\n                <div className=\"reset-password__buttons\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"reset-password__buttons_return\"\r\n                        onClick={() => setResetPasswordActive(false)}\r\n                    >\r\n                        Згадали?\r\n                    </button>\r\n                    <SubmitButton\r\n                        title=\"Нагадати\"\r\n                        onClick={() => setModalIsActive(true)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {modalIsActive && (\r\n                <div className=\"reset-password-modal\">\r\n                    <Modal\r\n                        active={modalIsActive}\r\n                        setActive={setModalIsActive}\r\n                        isSubmitedText=\"Ваш відгук успішно додано!\"\r\n                        maxwidth=\"500px\"\r\n                    >\r\n                        <h1 className=\"reset-password-modal__title\">\r\n                            На адресу вашої електронної пошти було надіслано\r\n                            посилання для встановлення нового пароля.\r\n                        </h1>\r\n                        <p className=\"reset-password-modal__text\">\r\n                            Крім папки \"Вхідні\" перевірте також папку \"Спам\"\r\n                            вашої поштової скриньки. Можливо, лист потрапив\r\n                            туди.\r\n                        </p>\r\n                    </Modal>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import { useState, useEffect } from 'react';\r\nimport './PaymentMethod.scss';\r\n\r\ntype Props = {\r\n    inputName: string;\r\n    selectedValue: string;\r\n    onChange: (value: string) => void;\r\n};\r\n\r\nexport interface PaymentMethodInterface {\r\n    id: string;\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nexport const paymentMethodList: PaymentMethodInterface[] = [\r\n    {\r\n        id: 'cart',\r\n        label: 'На карту',\r\n        value: 'CARD',\r\n    },\r\n    {\r\n        id: 'iban',\r\n        label: 'На розрахунковий рахунок',\r\n        value: 'IBAN',\r\n    },\r\n    {\r\n        id: 'cash',\r\n        label: 'Готівкою при отриманні',\r\n        value: 'CASH',\r\n    },\r\n];\r\n\r\nconst PaymentMethod = (props: Props) => {\r\n    const { inputName, selectedValue, onChange } = props;\r\n    const [selectedPaymentOption, setSelectedPaymentOption] =\r\n        useState<string>(selectedValue);\r\n\r\n    useEffect(() => {\r\n        onChange(selectedPaymentOption);\r\n    }, [selectedPaymentOption]);\r\n\r\n    return (\r\n        <div className=\"payment-method\">\r\n            <h2 className=\"payment-method__title\">Спосіб оплати:</h2>\r\n            {paymentMethodList.map((option) => (\r\n                <div\r\n                    key={option.id}\r\n                    className=\"delivery-payment-block__options_option\"\r\n                >\r\n                    <label className=\"delivery-payment-block__options_option_label\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name={inputName}\r\n                            value={selectedPaymentOption}\r\n                            checked={selectedPaymentOption === option.value}\r\n                            onChange={() =>\r\n                                setSelectedPaymentOption(option.value)\r\n                            }\r\n                            className=\"delivery-payment-block__options_option_label_input\"\r\n                        />\r\n                        {option.label}\r\n                    </label>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PaymentMethod;\r\n","import { useEffect, useCallback } from 'react';\r\nimport { useFormik, FormikErrors } from 'formik';\r\nimport nextId from 'react-id-generator';\r\nimport PaymentMethod from '../PaymentMethod/PaymentMethod';\r\nimport SubmitButton from '../../../shared-components/SubmitButton/SubmitButton';\r\nimport ErrorMessageValidation from '../../../../../shared-components/Header/Auth/ErrorMessageValidation/ErrorMessageValidation';\r\nimport { useAppDispatch } from '../../../../../hooks/hooks';\r\nimport { setDeliveryInfo } from '../../../../../store/reducers/orderSlice';\r\nimport type { OrderData } from '../../../../../types/types';\r\nimport debounce from '../../../../../utils/debounce';\r\nimport './AddressDelivery.scss';\r\n\r\ninterface FormValues {\r\n    city: string;\r\n    house: string;\r\n    street: string;\r\n    apartment: string;\r\n    comment: string;\r\n    paymentMethod: string;\r\n    callNeeded: boolean;\r\n}\r\n\r\nconst AddressDelivery = ({\r\n    isResetAddress,\r\n    handleSubmitOrderForm,\r\n    animationClass,\r\n}: {\r\n    isResetAddress?: boolean;\r\n    handleSubmitOrderForm: () => void;\r\n    animationClass: string;\r\n}) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const localOrderData: OrderData | null = JSON.parse(\r\n        localStorage.getItem('orderData') || JSON.stringify(null)\r\n    );\r\n\r\n    const debouncedUpdateOrderDelivery = useCallback(\r\n        debounce((values) => {\r\n            dispatch(setDeliveryInfo({ ...values }));\r\n        }, 800),\r\n        []\r\n    );\r\n\r\n    const formik5 = useFormik({\r\n        initialValues: {\r\n            city: localOrderData?.delivery?.city || '',\r\n            house: localOrderData?.delivery?.house || '',\r\n            street: localOrderData?.delivery?.street || '',\r\n            apartment: localOrderData?.delivery?.apartment || '',\r\n            comment: localOrderData?.delivery?.comment || '',\r\n            paymentMethod: localOrderData?.delivery?.paymentMethod || 'CARD',\r\n            callNeeded: true,\r\n        },\r\n        validate: (values: FormValues) => {\r\n            const errors: FormikErrors<FormValues> = {};\r\n            const requiredMessage = \"Це поле обов'язкове для заповнення\";\r\n\r\n            if (!values.city) {\r\n                errors.city = requiredMessage;\r\n            }\r\n\r\n            if (!values.house) {\r\n                errors.house = requiredMessage;\r\n            }\r\n\r\n            if (!values.street) {\r\n                errors.street = requiredMessage;\r\n            }\r\n\r\n            if (!values.apartment) {\r\n                errors.apartment = requiredMessage;\r\n            }\r\n            debouncedUpdateOrderDelivery(values);\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(\r\n                setDeliveryInfo({\r\n                    ...values,\r\n                })\r\n            );\r\n            setTimeout(() => {\r\n                handleSubmitOrderForm();\r\n            }, 100);\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isResetAddress) {\r\n            formik5.resetForm();\r\n        }\r\n    }, [isResetAddress]);\r\n\r\n    return (\r\n        <form\r\n            className=\"customer-form\"\r\n            onSubmit={formik5.handleSubmit}\r\n            noValidate\r\n        >\r\n            <label className=\"customer-form__item\">\r\n                <p>Місто*</p>\r\n                <input\r\n                    className=\"customer-form__item_input\"\r\n                    id={nextId('city')}\r\n                    name=\"city\"\r\n                    type=\"text\"\r\n                    placeholder=\"Ваше місто\"\r\n                    onChange={formik5.handleChange}\r\n                    onBlur={formik5.handleBlur}\r\n                    value={formik5.values.city}\r\n                    required\r\n                />\r\n                {formik5.touched.city && formik5.errors.city ? (\r\n                    <ErrorMessageValidation message={formik5.errors.city} />\r\n                ) : null}\r\n            </label>\r\n            <label className=\"customer-form__item\">\r\n                <p>Будинок*</p>\r\n                <input\r\n                    className=\"customer-form__item_input\"\r\n                    id={nextId('house')}\r\n                    name=\"house\"\r\n                    type=\"text\"\r\n                    placeholder=\"Ваш будинок\"\r\n                    onChange={formik5.handleChange}\r\n                    onBlur={formik5.handleBlur}\r\n                    value={formik5.values.house}\r\n                    required\r\n                />\r\n                {formik5.touched.house && formik5.errors.house ? (\r\n                    <ErrorMessageValidation message={formik5.errors.house} />\r\n                ) : null}\r\n            </label>\r\n            <label className=\"customer-form__item\">\r\n                <p>Вулиця*</p>\r\n                <input\r\n                    className=\"customer-form__item_input\"\r\n                    id={nextId('street')}\r\n                    name=\"street\"\r\n                    type=\"text\"\r\n                    placeholder=\"Ваша вулиця\"\r\n                    onChange={formik5.handleChange}\r\n                    onBlur={formik5.handleBlur}\r\n                    value={formik5.values.street}\r\n                    required\r\n                />\r\n                {formik5.touched.street && formik5.errors.street ? (\r\n                    <ErrorMessageValidation message={formik5.errors.street} />\r\n                ) : null}\r\n            </label>\r\n            <label className=\"customer-form__item\">\r\n                <p>Квартира*</p>\r\n                <input\r\n                    className=\"customer-form__item_input\"\r\n                    id={nextId('apartment')}\r\n                    name=\"apartment\"\r\n                    type=\"text\"\r\n                    placeholder=\"Ваша квартира\"\r\n                    onChange={formik5.handleChange}\r\n                    onBlur={formik5.handleBlur}\r\n                    value={formik5.values.apartment}\r\n                    required\r\n                />\r\n                {formik5.touched.apartment && formik5.errors.apartment ? (\r\n                    <ErrorMessageValidation\r\n                        message={formik5.errors.apartment}\r\n                    />\r\n                ) : null}\r\n            </label>\r\n            <PaymentMethod\r\n                inputName=\"paymentMethod\"\r\n                selectedValue={formik5.values.paymentMethod}\r\n                onChange={(value) => {\r\n                    formik5.setFieldValue('paymentMethod', value);\r\n                }}\r\n            />\r\n            <div className=\"payment-method__comment\">\r\n                <label className=\"payment-method__comment_label\">\r\n                    <p className=\"payment-method__comment_label_title\">\r\n                        Коментар\r\n                    </p>\r\n                    <textarea\r\n                        placeholder=\"Ваш коментар\"\r\n                        className=\"payment-method__comment_label_text\"\r\n                        name=\"comment\"\r\n                        value={formik5.values.comment}\r\n                        rows={6}\r\n                        onChange={formik5.handleChange}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div className=\"customer-form__bottom\">\r\n                <div className=\"payment-method__completion\">\r\n                    <label className=\"filter__label\">\r\n                        <input\r\n                            className=\"filter__input\"\r\n                            type=\"checkbox\"\r\n                            name=\"callNeeded\"\r\n                            checked={formik5.values.callNeeded === false}\r\n                            onChange={() => {\r\n                                formik5.setFieldValue(\r\n                                    'callNeeded',\r\n                                    !formik5.values.callNeeded\r\n                                );\r\n                            }}\r\n                        />\r\n                        <span className=\"filter__input_custom-input\">\r\n                            <span className=\"filter__input_custom-input_default\" />\r\n                            <span className=\"filter__input_custom-input_checked\" />\r\n                        </span>\r\n                        <p className=\"payment-method__completion_input_title\">\r\n                            Не дзвонити для підтвердження\r\n                        </p>\r\n                    </label>\r\n                </div>\r\n                <div className=\"button-wrapper\">\r\n                    <SubmitButton\r\n                        title=\"Оформити замовлення\"\r\n                        className={animationClass}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nAddressDelivery.defaultProps = {\r\n    isResetAddress: false,\r\n};\r\n\r\nexport default AddressDelivery;\r\n","import { useState, useEffect, Dispatch, SetStateAction, memo } from 'react';\r\nimport nextId from 'react-id-generator';\r\nimport './CustomSelect.scss';\r\n\r\ntype SelectFields = {\r\n    title: string;\r\n    fieldName: string;\r\n};\r\n\r\ntype Props = {\r\n    selectFields: SelectFields[];\r\n    defaulTitle: string;\r\n    selectNameOptions: string;\r\n    selectedValue: string;\r\n    onChange: (value: string) => void;\r\n};\r\n\r\nconst CustomSelect = (props: Props) => {\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n    const {\r\n        selectFields,\r\n        defaulTitle,\r\n        selectNameOptions,\r\n        selectedValue,\r\n        onChange,\r\n    } = props;\r\n    const [activeOption, setActiveOption] = useState<string>(selectedValue);\r\n\r\n    const closeSelect = (e: any) => {\r\n        if (\r\n            !e.target.closest('.select__custom-fields') &&\r\n            !e.target.closest('.select__custom')\r\n        ) {\r\n            setIsActive(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.addEventListener('click', closeSelect);\r\n        }\r\n\r\n        return () => document.removeEventListener('click', closeSelect);\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        onChange(activeOption);\r\n    }, [activeOption]);\r\n\r\n    useEffect(() => {\r\n        setActiveOption(selectedValue);\r\n    }, [selectedValue]);\r\n\r\n    const renderSortFields = () => {\r\n        return selectFields.map((field, index) => {\r\n            const { title, fieldName } = field;\r\n            return (\r\n                <div className=\"select__field\" key={nextId('select-field')}>\r\n                    <input\r\n                        className=\"select__input\"\r\n                        id={`input-${fieldName}${index}`}\r\n                        type=\"radio\"\r\n                        name={selectNameOptions}\r\n                        checked={title === activeOption}\r\n                        value={title}\r\n                        onChange={(e) => setActiveOption(e.target.value)}\r\n                    />\r\n                    <label\r\n                        className=\"select__label\"\r\n                        htmlFor={`input-${fieldName}${index}`}\r\n                    >\r\n                        {title}\r\n                    </label>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n    return (\r\n        <div className=\"select\">\r\n            <div className={`select__custom ${isActive ? 'active' : ''}`}>\r\n                <button\r\n                    className=\"select__open-btn\"\r\n                    type=\"button\"\r\n                    onClick={() => setIsActive(!isActive)}\r\n                >\r\n                    <span className=\"select-btn__current-option\">\r\n                        {activeOption || defaulTitle}\r\n                    </span>\r\n                </button>\r\n                <fieldset className=\"select__custom-fields\">\r\n                    {renderSortFields()}\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(CustomSelect);\r\n","import { useCallback } from 'react';\r\nimport { useFormik, FormikErrors } from 'formik';\r\nimport nextId from 'react-id-generator';\r\nimport PaymentMethod from '../PaymentMethod/PaymentMethod';\r\nimport SubmitButton from '../../../shared-components/SubmitButton/SubmitButton';\r\nimport ErrorMessageValidation from '../../../../../shared-components/Header/Auth/ErrorMessageValidation/ErrorMessageValidation';\r\nimport CustomSelect from '../../../../../shared-components/FormComponents/CustomSelect/CustomSelect';\r\nimport { useAppDispatch } from '../../../../../hooks/hooks';\r\nimport { setDeliveryInfo } from '../../../../../store/reducers/orderSlice';\r\nimport debounce from '../../../../../utils/debounce';\r\nimport type { OrderData } from '../../../../../types/types';\r\nimport './CompanyDelivery.scss';\r\n\r\ninterface FormValues {\r\n    deliveryCompanyName: string;\r\n    region: string;\r\n    city: string;\r\n    postOffice: string;\r\n    paymentMethod: string;\r\n    comment: string;\r\n    callNeeded: boolean;\r\n}\r\n\r\nconst CompanyDelivery = ({\r\n    handleSubmitOrderForm,\r\n    animationClass,\r\n}: {\r\n    handleSubmitOrderForm: () => void;\r\n    animationClass: string;\r\n}) => {\r\n    const dispatch = useAppDispatch();\r\n    const deliveryOptions = [\r\n        {\r\n            title: 'Укрпошта',\r\n            fieldName: 'ukrposhta',\r\n        },\r\n        {\r\n            title: 'Нова пошта',\r\n            fieldName: 'navaposhta',\r\n        },\r\n        {\r\n            title: 'Meest',\r\n            fieldName: 'meest',\r\n        },\r\n        {\r\n            title: 'Автолюкс',\r\n            fieldName: 'autolux',\r\n        },\r\n        {\r\n            title: 'Делівері',\r\n            fieldName: 'delivery',\r\n        },\r\n    ];\r\n    const postalOptions = [\r\n        {\r\n            title: 'Відділення 1',\r\n            fieldName: '1',\r\n        },\r\n        {\r\n            title: 'Відділення 2',\r\n            fieldName: '2',\r\n        },\r\n        {\r\n            title: 'Відділення 3',\r\n            fieldName: '3',\r\n        },\r\n        {\r\n            title: 'Відділення 4',\r\n            fieldName: '4',\r\n        },\r\n        {\r\n            title: 'Відділення 5',\r\n            fieldName: '5',\r\n        },\r\n    ];\r\n\r\n    const localOrderData: OrderData | null = JSON.parse(\r\n        localStorage.getItem('orderData') || JSON.stringify(null)\r\n    );\r\n\r\n    const debouncedUpdateOrderDelivery = useCallback(\r\n        debounce((values) => {\r\n            dispatch(setDeliveryInfo({ ...values }));\r\n        }, 800),\r\n        []\r\n    );\r\n\r\n    const formik4 = useFormik({\r\n        initialValues: {\r\n            deliveryCompanyName:\r\n                localOrderData?.delivery?.deliveryCompanyName || '',\r\n            region: localOrderData?.delivery?.region || '',\r\n            city: localOrderData?.delivery?.city || '',\r\n            postOffice: localOrderData?.delivery?.postOffice || '',\r\n            paymentMethod: localOrderData?.delivery?.paymentMethod || 'CARD',\r\n            comment: localOrderData?.delivery?.comment || '',\r\n            callNeeded: true,\r\n        },\r\n        validate: (values: FormValues) => {\r\n            const errors: FormikErrors<FormValues> = {};\r\n            const requiredMessage = \"Це поле обов'язкове для заповнення\";\r\n\r\n            if (!values.deliveryCompanyName) {\r\n                errors.deliveryCompanyName = requiredMessage;\r\n            }\r\n\r\n            if (!values.region) {\r\n                errors.region = requiredMessage;\r\n            }\r\n\r\n            if (!values.city) {\r\n                errors.city = requiredMessage;\r\n            }\r\n\r\n            if (!values.postOffice) {\r\n                errors.postOffice = requiredMessage;\r\n            }\r\n            debouncedUpdateOrderDelivery(values);\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(\r\n                setDeliveryInfo({\r\n                    ...values,\r\n                })\r\n            );\r\n            setTimeout(() => {\r\n                handleSubmitOrderForm();\r\n            }, 100);\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form\r\n            className=\"customer-form\"\r\n            noValidate\r\n            onSubmit={formik4.handleSubmit}\r\n        >\r\n            <div className=\"customer-form__item\">\r\n                <p>Поштовий сервіс*</p>\r\n                <CustomSelect\r\n                    selectFields={deliveryOptions}\r\n                    defaulTitle=\"Оберіть\"\r\n                    selectNameOptions=\"deliveryCompanyName\"\r\n                    selectedValue={formik4.values.deliveryCompanyName}\r\n                    onChange={(value) => {\r\n                        formik4.setFieldValue('deliveryCompanyName', value);\r\n                    }}\r\n                />\r\n                {formik4.touched.deliveryCompanyName &&\r\n                formik4.errors.deliveryCompanyName ? (\r\n                    <ErrorMessageValidation\r\n                        message={formik4.errors.deliveryCompanyName}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n            <label className=\"customer-form__item\">\r\n                <p>Область*</p>\r\n                <input\r\n                    className=\"customer-form__item_input\"\r\n                    id={nextId('region')}\r\n                    name=\"region\"\r\n                    type=\"text\"\r\n                    placeholder=\"Ваша область\"\r\n                    onChange={formik4.handleChange}\r\n                    onBlur={formik4.handleBlur}\r\n                    value={formik4.values.region}\r\n                    required\r\n                />\r\n                {formik4.touched.region && formik4.errors.region ? (\r\n                    <ErrorMessageValidation message={formik4.errors.region} />\r\n                ) : null}\r\n            </label>\r\n            <label className=\"customer-form__item\">\r\n                <p>Місто*</p>\r\n                <input\r\n                    className=\"customer-form__item_input\"\r\n                    id={nextId('city')}\r\n                    name=\"city\"\r\n                    type=\"text\"\r\n                    placeholder=\"Ваше місто\"\r\n                    onChange={formik4.handleChange}\r\n                    onBlur={formik4.handleBlur}\r\n                    value={formik4.values.city}\r\n                    required\r\n                />\r\n                {formik4.touched.city && formik4.errors.city ? (\r\n                    <ErrorMessageValidation message={formik4.errors.city} />\r\n                ) : null}\r\n            </label>\r\n            <div className=\"customer-form__item\">\r\n                <p>Відділення*</p>\r\n                <CustomSelect\r\n                    selectFields={postalOptions}\r\n                    defaulTitle=\"Оберіть\"\r\n                    selectNameOptions=\"postOffice\"\r\n                    selectedValue={formik4.values.postOffice}\r\n                    onChange={(value) => {\r\n                        formik4.setFieldValue('postOffice', value);\r\n                    }}\r\n                />\r\n                {formik4.touched.postOffice && formik4.errors.postOffice ? (\r\n                    <ErrorMessageValidation\r\n                        message={formik4.errors.postOffice}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n            <PaymentMethod\r\n                inputName=\"paymentMethod\"\r\n                selectedValue={formik4.values.paymentMethod}\r\n                onChange={(value) => {\r\n                    formik4.setFieldValue('paymentMethod', value);\r\n                }}\r\n            />\r\n            <div className=\"payment-method__comment\">\r\n                <label className=\"payment-method__comment_label\">\r\n                    <p className=\"payment-method__comment_label_title\">\r\n                        Коментар\r\n                    </p>\r\n                    <textarea\r\n                        placeholder=\"Ваш коментар\"\r\n                        className=\"payment-method__comment_label_text\"\r\n                        name=\"comment\"\r\n                        value={formik4.values.comment}\r\n                        rows={6}\r\n                        onChange={formik4.handleChange}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div className=\"customer-form__bottom\">\r\n                <div className=\"payment-method__completion\">\r\n                    <label className=\"filter__label\">\r\n                        <input\r\n                            className=\"filter__input\"\r\n                            type=\"checkbox\"\r\n                            name=\"callNeeded\"\r\n                            checked={formik4.values.callNeeded === false}\r\n                            onChange={() => {\r\n                                formik4.setFieldValue(\r\n                                    'callNeeded',\r\n                                    !formik4.values.callNeeded\r\n                                );\r\n                            }}\r\n                        />\r\n                        <span className=\"filter__input_custom-input\">\r\n                            <span className=\"filter__input_custom-input_default\" />\r\n                            <span className=\"filter__input_custom-input_checked\" />\r\n                        </span>\r\n                        <p className=\"payment-method__completion_input_title\">\r\n                            Не дзвонити для підтвердження\r\n                        </p>\r\n                    </label>\r\n                </div>\r\n                <div className=\"button-wrapper\">\r\n                    <SubmitButton\r\n                        title=\"Оформити замовлення\"\r\n                        className={animationClass}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CompanyDelivery;\r\n","import { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport AddressDelivery from './AddressDelivery/AddressDelivery';\r\nimport CompanyDelivery from './CompanyDelivery/CompanyDelivery';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\r\nimport './DeliveryAndPaymentForm.scss';\r\nimport {\r\n    setDeliveryInfo,\r\n    makeOrder,\r\n    resetOrderFormData,\r\n} from '../../../../store/reducers/orderSlice';\r\nimport type { OrderData } from '../../../../types/types';\r\n\r\nexport interface DeliveryOption {\r\n    id: string;\r\n    label: string;\r\n    description: string;\r\n    value: string;\r\n}\r\n\r\nexport interface DeliveryCompany {\r\n    id: number;\r\n    title: string;\r\n    value: string;\r\n}\r\n\r\nexport const deliveryOptions: DeliveryOption[] = [\r\n    {\r\n        id: 'postal-delivery',\r\n        label: 'Доставка у відділення',\r\n        description:\r\n            'Швидкий та надійний спосіб отримання замовлень. Наша послуга \"Доставка у відділення\" пропонує зручний спосіб отримати ваші покупки.',\r\n        value: 'postal-delivery',\r\n    },\r\n    {\r\n        id: 'address-delivery',\r\n        label: 'Адресна доставка',\r\n        description:\r\n            'Отримайте ваші замовлення прямо до дверей. Наша послуга \"Адресна доставка\" дозволяє зручно отримувати товари безпосередньо на вашу адресу.',\r\n        value: 'address-delivery',\r\n    },\r\n];\r\n\r\ntype Props = {\r\n    selectedDeliveryOption: string;\r\n    setSelectedDeliveryOption: React.Dispatch<React.SetStateAction<string>>;\r\n};\r\n\r\nconst DeliveryAndPaymentForm = (props: Props) => {\r\n    const { selectedDeliveryOption, setSelectedDeliveryOption } = props;\r\n    const localOrderData: OrderData | null = JSON.parse(\r\n        localStorage.getItem('orderData') || JSON.stringify(null)\r\n    );\r\n    const { loading, error, orderNumber } = useAppSelector(\r\n        (state) => state.order\r\n    );\r\n    const [selectedDeliveryName, setSelectedDeliveryName] =\r\n        useState<string>('');\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (loading === 'succeeded' && orderNumber) {\r\n            dispatch(resetOrderFormData());\r\n            navigate('/checkout/success');\r\n        }\r\n    }, [loading, error, orderNumber]);\r\n\r\n    useEffect(() => {\r\n        if (localOrderData?.delivery?.deliveryType) {\r\n            setSelectedDeliveryOption(localOrderData.delivery.deliveryType);\r\n        }\r\n    }, []);\r\n\r\n    const handleOptionChange = (optionValue: string) => {\r\n        dispatch(\r\n            setDeliveryInfo({\r\n                deliveryType: optionValue,\r\n                deliveryCompanyName: '',\r\n                region: '',\r\n                city: '',\r\n                postOffice: '',\r\n                house: '',\r\n                street: '',\r\n                apartment: '',\r\n            })\r\n        );\r\n        setTimeout(() => {\r\n            setSelectedDeliveryOption(optionValue);\r\n        }, 50);\r\n    };\r\n\r\n    const handleSubmitOrderForm = () => {\r\n        dispatch(makeOrder());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"delivery-payment-block\">\r\n                <div className=\"delivery-payment-block__options\">\r\n                    {deliveryOptions.map((option) => (\r\n                        <div\r\n                            key={option.id}\r\n                            className=\"delivery-payment-block__options_option\"\r\n                        >\r\n                            <label className=\"delivery-payment-block__options_option_label\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"deliveryOption\"\r\n                                    value={option.value}\r\n                                    checked={\r\n                                        selectedDeliveryOption === option.id\r\n                                    }\r\n                                    onChange={() => {\r\n                                        handleOptionChange(option.value);\r\n                                        setSelectedDeliveryName(option.label);\r\n                                    }}\r\n                                    className=\"delivery-payment-block__options_option_label_input\"\r\n                                />\r\n                                {option.label}\r\n                            </label>\r\n                            <p className=\"delivery-payment-block__options_option_description\">\r\n                                {option.description}\r\n                            </p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"delivery-payment-block__form\">\r\n                {selectedDeliveryOption === 'postal-delivery' ? (\r\n                    <CompanyDelivery\r\n                        handleSubmitOrderForm={handleSubmitOrderForm}\r\n                        animationClass={`${\r\n                            loading === 'pending' ? 'loading' : ''\r\n                        }`}\r\n                    />\r\n                ) : (\r\n                    <AddressDelivery\r\n                        handleSubmitOrderForm={handleSubmitOrderForm}\r\n                        animationClass={`${\r\n                            loading === 'pending' ? 'loading' : ''\r\n                        }`}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeliveryAndPaymentForm;\r\n","import nextId from 'react-id-generator';\r\nimport { useAppSelector } from '../../../../hooks/hooks';\r\nimport addSpaceToPrice from '../../../../utils/addSpaceToPrice';\r\nimport './ProductsList.scss';\r\n\r\nconst ProductsList = () => {\r\n    const productsInfoToCheckout = useAppSelector(\r\n        (state) => state.cart.productsInfoToCheckout\r\n    );\r\n    return (\r\n        <div className=\"checkout__products\">\r\n            <div className=\"checkout__products-header products-header\">\r\n                <span className=\"products-header__left\">Товар</span>\r\n                <span className=\"products-header__right\">Ціна</span>\r\n            </div>\r\n            <ul className=\"checkout__products-list products-list\">\r\n                {productsInfoToCheckout.map((item) => {\r\n                    const { quantityToCheckout } = item;\r\n                    if (quantityToCheckout < 1) return '';\r\n                    return (\r\n                        <li\r\n                            className=\"products-list__item\"\r\n                            key={nextId('checkout-product-item')}\r\n                        >\r\n                            <span className=\"products-list__item-name\">\r\n                                {item.productName}, {item.skuCode},{' '}\r\n                                <span className=\"products-list__item-nowrap\">\r\n                                    {item.colorName}{' '}\r\n                                    <span className=\"products-list__item-quantity\">\r\n                                        x {item.quantityToCheckout}\r\n                                    </span>\r\n                                </span>\r\n                            </span>\r\n                            <span className=\"products-list__item-price\">\r\n                                {addSpaceToPrice(item.price)} UAH\r\n                            </span>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductsList;\r\n","import { useCallback, useEffect, Dispatch, SetStateAction, memo } from 'react';\r\nimport { useFormik, FormikErrors } from 'formik';\r\nimport SubmitButton from '../../shared-components/SubmitButton/SubmitButton';\r\nimport formValidation from '../../../../utils/formValidation';\r\nimport {\r\n    EmailInput,\r\n    PhoneNumberInput,\r\n    FirstNameInput,\r\n    LastNameInput,\r\n} from '../../../../shared-components/FormComponents/Inputs';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\r\nimport debounce from '../../../../utils/debounce';\r\nimport { setClientContacts } from '../../../../store/reducers/orderSlice';\r\nimport {\r\n    resetUserLoginStatus,\r\n    resetUserNewPasswordLoading,\r\n} from '../../../../store/reducers/authSlice';\r\nimport {\r\n    getUserProfileData,\r\n    resetUserProfileDataStatus,\r\n} from '../../../../store/reducers/userActionsSlice';\r\nimport type { OrderData } from '../../../../types/types';\r\nimport './CustomerForm.scss';\r\n\r\ninterface FormValues {\r\n    [key: string]: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    phoneNumber: string;\r\n    email: string;\r\n}\r\n\r\ntype Props = {\r\n    handleSubmit: (isRegular: boolean) => void;\r\n    setCustomerForm: Dispatch<SetStateAction<any>>;\r\n};\r\n\r\nconst CustomerForm = (props: Props) => {\r\n    const { handleSubmit, setCustomerForm } = props;\r\n    const dispatch = useAppDispatch();\r\n    const loginLoading = useAppSelector((state) => state.auth.loginLoading);\r\n    const userData = useAppSelector(\r\n        (state) => state.userActions.userProfileData\r\n    );\r\n    const userDataLoading = useAppSelector(\r\n        (state) => state.userActions.loadingUserPersonalInfo\r\n    );\r\n    const newPasswordLoading = useAppSelector(\r\n        (state) => state.auth.newPasswordLoading\r\n    );\r\n    const cartTotal = useAppSelector((state) => state.cart.cartTotal);\r\n    const localOrderData: OrderData | null = JSON.parse(\r\n        localStorage.getItem('orderData') || JSON.stringify(null)\r\n    );\r\n\r\n    const debouncedUpdateOrderContacts = useCallback(\r\n        debounce((values) => {\r\n            dispatch(setClientContacts({ ...values }));\r\n        }, 800),\r\n        []\r\n    );\r\n\r\n    const formik3 = useFormik({\r\n        initialValues: {\r\n            firstName: localOrderData?.firstName || '',\r\n            lastName: localOrderData?.lastName || '',\r\n            phoneNumber: localOrderData?.phoneNumber || '',\r\n            email: localOrderData?.email || '',\r\n        },\r\n        validate: (values: FormValues) => {\r\n            const errors: FormikErrors<FormValues> = {};\r\n            const validationFields = [\r\n                'firstName',\r\n                'lastName',\r\n                'phoneNumber',\r\n                'email',\r\n            ];\r\n\r\n            debouncedUpdateOrderContacts(values);\r\n            validationFields.forEach((fieldName: string) => {\r\n                const error = formValidation(fieldName, values[fieldName]);\r\n                if (error) {\r\n                    if (fieldName !== 'email') {\r\n                        errors[fieldName] = error;\r\n                    } else if (values[fieldName]) {\r\n                        errors[fieldName] = error;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values, { resetForm }) => {\r\n            if (\r\n                cartTotal &&\r\n                cartTotal.totalQuantityToCheckout !== 0 &&\r\n                localOrderData &&\r\n                localOrderData?.orderItems &&\r\n                localOrderData.orderItems.length > 0\r\n            ) {\r\n                handleSubmit(true);\r\n                dispatch(setClientContacts({ ...values }));\r\n                resetForm();\r\n            }\r\n            if (\r\n                !cartTotal ||\r\n                cartTotal.totalQuantityToCheckout === 0 ||\r\n                !localOrderData?.orderItems ||\r\n                localOrderData.orderItems.length === 0\r\n            ) {\r\n                alert('не можна зробити замовлення, якщо відсутні товари');\r\n            }\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setCustomerForm(formik3);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (loginLoading !== 'succeeded') return;\r\n        if (localOrderData?.firstName) {\r\n            formik3.setValues({\r\n                firstName: localOrderData?.firstName || '',\r\n                lastName: localOrderData?.lastName || '',\r\n                phoneNumber: localOrderData?.phoneNumber || '',\r\n                email: localOrderData?.email || '',\r\n            });\r\n        }\r\n    }, [loginLoading]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            !formik3.values.firstName &&\r\n            !formik3.values.lastName &&\r\n            !formik3.values.phoneNumber &&\r\n            !formik3.values.email\r\n        ) {\r\n            dispatch(getUserProfileData());\r\n        }\r\n        if (\r\n            loginLoading === 'succeeded' ||\r\n            newPasswordLoading === 'succeeded'\r\n        ) {\r\n            dispatch(getUserProfileData());\r\n        }\r\n    }, [loginLoading, newPasswordLoading]);\r\n\r\n    useEffect(() => {\r\n        if (userDataLoading === 'succeeded' && userData) {\r\n            formik3.setValues({\r\n                firstName: userData.firstName || '',\r\n                lastName: userData.lastName || '',\r\n                phoneNumber: userData.phoneNumber || '',\r\n                email: userData.email || '',\r\n            });\r\n            dispatch(resetUserProfileDataStatus());\r\n            dispatch(resetUserLoginStatus());\r\n            dispatch(resetUserNewPasswordLoading());\r\n        }\r\n    }, [userData, userDataLoading]);\r\n\r\n    return (\r\n        <form\r\n            className=\"customer-form\"\r\n            onSubmit={formik3.handleSubmit}\r\n            noValidate\r\n        >\r\n            <div className=\"customer-form__item\">\r\n                <FirstNameInput formik={formik3} />\r\n            </div>\r\n            <div className=\"customer-form__item\">\r\n                <LastNameInput formik={formik3} />\r\n            </div>\r\n            <div className=\"customer-form__item\">\r\n                <PhoneNumberInput formik={formik3} />\r\n            </div>\r\n            <div className=\"customer-form__item\">\r\n                <EmailInput formik={formik3} />\r\n            </div>\r\n            <div className=\"button-wrapper\">\r\n                <SubmitButton title=\"Далі\" />\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default memo(CustomerForm);\r\n","import { useState, memo } from 'react';\r\nimport LoginForm from '../../../../shared-components/Header/Auth/LoginForm/LoginForm';\r\n\r\nimport './RegularCustomerAuth.scss';\r\nimport GoogleAuth from '../../../../shared-components/Header/Auth/GoogleAuth/GoogleAuth';\r\n\r\ntype Props = {\r\n    setResetPasswordActive: React.Dispatch<React.SetStateAction<boolean>>;\r\n    setRegularLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\ninterface FormValues {\r\n    [key: string]: string;\r\n    password: string;\r\n    email: string;\r\n}\r\n\r\nconst RegularCustomerAuth = (props: Props) => {\r\n    const { setResetPasswordActive, setRegularLoggedIn } = props;\r\n    const [isLoginBtnClicked, setIsLoginBtnClicked] = useState(false);\r\n\r\n    return (\r\n        <div className=\"regular-customer\">\r\n            <div className=\"regular-customer__form\">\r\n                <LoginForm\r\n                    styleClass=\"customer-form\"\r\n                    setIsLoginBtnClicked={setIsLoginBtnClicked}\r\n                />\r\n            </div>\r\n            <span className=\"custom-line\" />\r\n            <div className=\"regular-customer__login\">\r\n                <p className=\"regular-customer__login_title\">\r\n                    Увійдіть як користувач\r\n                </p>\r\n                <GoogleAuth\r\n                    additionalClass=\"regular-customer__login_button\"\r\n                    textBtn=\"Увійти за допомогою Google\"\r\n                    isTitleShow={false}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(RegularCustomerAuth);\r\n","import { useEffect, memo } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\r\nimport { setOrderData } from '../../../../store/reducers/orderSlice';\r\nimport type { OrderData } from '../../../../types/types';\r\n\r\nconst FormUpdater = () => {\r\n    const orderData = useAppSelector((state) => state.order.data);\r\n    const localOrderData: OrderData | null = JSON.parse(\r\n        localStorage.getItem('orderData') || JSON.stringify(null)\r\n    );\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (localOrderData) {\r\n            dispatch(setOrderData(localOrderData));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (orderData) {\r\n            localStorage.setItem('orderData', JSON.stringify(orderData));\r\n        }\r\n    }, [orderData]);\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'none',\r\n                userSelect: 'none',\r\n                visibility: 'hidden',\r\n            }}\r\n        >\r\n            ''\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(FormUpdater);\r\n","/* eslint-disable no-nested-ternary */\r\nimport { useState, useEffect, useCallback, memo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport { useAppSelector, useAppDispatch } from '../../hooks/hooks';\r\nimport Breadcrumbs from '../../shared-components/Breadcrumbs/Breadcrumbs';\r\nimport SummaryCart from '../ShoppingCartPage/components/SummaryCart/SummaryCart';\r\nimport ResetPassword from './components/ResetPassword/ResetPassword';\r\nimport DeliveryAndPaymentForm from './components/DeliveryAndPaymentForm/DeliveryAndPaymentForm';\r\nimport ProductsList from './components/ProductsList/ProductsList';\r\nimport CustomerForm from './components/CustomerForm/CustomerForm';\r\nimport RegularCustomerAuth from './components/RegularCustomerAuth/RegularCustomerAuth';\r\nimport FormUpdater from './components/FormUpdater/FormUpdater';\r\nimport { setOrderedProducts } from '../../store/reducers/orderSlice';\r\nimport './CheckoutPage.scss';\r\n\r\ntype ComponentsType = {\r\n    ResetPassword: JSX.Element;\r\n    NewCustomer: JSX.Element;\r\n    RegularCustomer: JSX.Element;\r\n    RegularCustomerLoggedIn: JSX.Element;\r\n    DeliveryAndPaymentForm: JSX.Element;\r\n};\r\n\r\nconst CheckoutPage = () => {\r\n    const [newCustomerActive, setNewCustomerActive] = useState(true);\r\n    const [regularCustomerActive, setRegularCustomerActive] = useState(false);\r\n    const [customerForm, setCustomerForm] = useState<any>(null);\r\n    const [firstStepActive, setFirstStepActive] = useState(true);\r\n    const [secondStepActive, setSecondStepActive] = useState(false);\r\n    const [resetPasswordActive, setResetPasswordActive] = useState(false);\r\n    const [regularLoggedIn, setRegularLoggedIn] = useState(false);\r\n    const [selectedDeliveryOption, setSelectedDeliveryOption] =\r\n        useState<string>('postal-delivery');\r\n    const navigate = useNavigate();\r\n    const cartTotal = useAppSelector((state) => state.cart.cartTotal);\r\n    const jwtToken = useAppSelector((state) => state.auth.jwtToken);\r\n    const productsInfoToCheckout = useAppSelector(\r\n        (state) => state.cart.productsInfoToCheckout\r\n    );\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!cartTotal) return;\r\n        const orderedProducts = productsInfoToCheckout\r\n            .map((item) => {\r\n                const { skuCode, colorHex, quantityToCheckout, price } = item;\r\n                return {\r\n                    productSkuCode: skuCode,\r\n                    colorHex,\r\n                    quantity: quantityToCheckout,\r\n                    price,\r\n                };\r\n            })\r\n            .filter((item) => item.quantity > 0);\r\n        dispatch(setOrderedProducts(orderedProducts));\r\n        if (cartTotal.totalQuantityToCheckout === 0) {\r\n            // navigate(-1);\r\n        }\r\n    }, [cartTotal]);\r\n\r\n    useEffect(() => {\r\n        if (jwtToken) {\r\n            setNewCustomerActive(false);\r\n            setRegularCustomerActive(true);\r\n            setRegularLoggedIn(true);\r\n        } else {\r\n            setRegularLoggedIn(false);\r\n        }\r\n    }, [jwtToken]);\r\n\r\n    const handleCustomerClick = useCallback((isRegular: boolean) => {\r\n        setFirstStepActive(true);\r\n        setSecondStepActive(false);\r\n        setNewCustomerActive(!isRegular);\r\n        setRegularCustomerActive(isRegular);\r\n        setResetPasswordActive(false);\r\n    }, []);\r\n\r\n    const handleStepClick = useCallback((isRegular: boolean) => {\r\n        setFirstStepActive(!isRegular);\r\n        setSecondStepActive(isRegular);\r\n    }, []);\r\n\r\n    const components: ComponentsType = {\r\n        ResetPassword: (\r\n            <ResetPassword setResetPasswordActive={setResetPasswordActive} />\r\n        ),\r\n        NewCustomer: (\r\n            <CustomerForm\r\n                handleSubmit={handleStepClick}\r\n                setCustomerForm={setCustomerForm}\r\n            />\r\n        ),\r\n        RegularCustomer: (\r\n            <RegularCustomerAuth\r\n                setResetPasswordActive={setResetPasswordActive}\r\n                setRegularLoggedIn={setRegularLoggedIn}\r\n            />\r\n        ),\r\n        RegularCustomerLoggedIn: (\r\n            <CustomerForm\r\n                handleSubmit={handleStepClick}\r\n                setCustomerForm={setCustomerForm}\r\n            />\r\n        ),\r\n        DeliveryAndPaymentForm: (\r\n            <DeliveryAndPaymentForm\r\n                selectedDeliveryOption={selectedDeliveryOption}\r\n                setSelectedDeliveryOption={setSelectedDeliveryOption}\r\n            />\r\n        ),\r\n    };\r\n\r\n    const activeComponent = secondStepActive\r\n        ? 'DeliveryAndPaymentForm'\r\n        : resetPasswordActive\r\n        ? 'ResetPassword'\r\n        : newCustomerActive\r\n        ? 'NewCustomer'\r\n        : regularLoggedIn\r\n        ? 'RegularCustomerLoggedIn'\r\n        : 'RegularCustomer';\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumbs />\r\n            <div className=\"container\">\r\n                <div className=\"checkout\">\r\n                    <h1 className=\"checkout__title\">Оформлення замовлення</h1>\r\n                    <div className=\"checkout__content\">\r\n                        <div className=\"customer-block\">\r\n                            <div className=\"customer-handler\">\r\n                                <ul className=\"customer-handler__list\">\r\n                                    {!jwtToken ? (\r\n                                        <li\r\n                                            onClick={() =>\r\n                                                handleCustomerClick(false)\r\n                                            }\r\n                                            className={\r\n                                                newCustomerActive\r\n                                                    ? 'customer-handler__list_item active'\r\n                                                    : 'customer-handler__list_item'\r\n                                            }\r\n                                        >\r\n                                            Новий покупець\r\n                                        </li>\r\n                                    ) : (\r\n                                        ''\r\n                                    )}\r\n                                    <li\r\n                                        onClick={() =>\r\n                                            handleCustomerClick(true)\r\n                                        }\r\n                                        className={`customer-handler__list_item regular-cutomer ${\r\n                                            regularCustomerActive\r\n                                                ? 'active'\r\n                                                : ''\r\n                                        } ${jwtToken ? 'center' : ''}`}\r\n                                    >\r\n                                        Постійний клієнт\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            {newCustomerActive || regularLoggedIn ? (\r\n                                <div className=\"customer-block__steps\">\r\n                                    <button\r\n                                        className={\r\n                                            firstStepActive\r\n                                                ? 'customer-block__steps_step active'\r\n                                                : 'customer-block__steps_step'\r\n                                        }\r\n                                        type=\"button\"\r\n                                        onClick={() => {\r\n                                            setFirstStepActive(true);\r\n                                            setSecondStepActive(false);\r\n                                        }}\r\n                                    >\r\n                                        <span\r\n                                            className={\r\n                                                firstStepActive\r\n                                                    ? 'customer-block__steps_step_number active'\r\n                                                    : 'customer-block__steps_step_number'\r\n                                            }\r\n                                        >\r\n                                            1\r\n                                        </span>\r\n                                        Особисті дані\r\n                                    </button>\r\n                                    <button\r\n                                        className={\r\n                                            secondStepActive\r\n                                                ? 'customer-block__steps_step active'\r\n                                                : 'customer-block__steps_step'\r\n                                        }\r\n                                        type=\"button\"\r\n                                        onClick={() => {\r\n                                            if (customerForm) {\r\n                                                customerForm.submitForm();\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <span\r\n                                            className={\r\n                                                secondStepActive\r\n                                                    ? 'customer-block__steps_step_number active'\r\n                                                    : 'customer-block__steps_step_number'\r\n                                            }\r\n                                        >\r\n                                            2\r\n                                        </span>\r\n                                        Інформація про доставку та оплату\r\n                                    </button>\r\n                                </div>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            {components[activeComponent]}\r\n                        </div>\r\n                        <div className=\"summary-block\">\r\n                            <SummaryCart\r\n                                title=\"Ваше замовлення\"\r\n                                bgColor=\"#FAFAF9\"\r\n                            >\r\n                                <ProductsList />\r\n                            </SummaryCart>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <FormUpdater />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(CheckoutPage);\r\n","import { useLocation } from 'react-router';\r\nimport './Breadcrumbs.scss';\r\nimport { NavLink } from 'react-router-dom';\r\nimport nextId from 'react-id-generator';\r\n\r\nconst Breadcrumbs = () => {\r\n    const location = useLocation();\r\n\r\n    const pathMapping: { [key: string]: string } = {\r\n        catalog: 'Каталог',\r\n        product: 'Товар',\r\n        cart: 'Кошик',\r\n        checkout: 'Оформлення замовлення',\r\n        success: 'Успішно',\r\n        cabinet: 'Особистий кабінет',\r\n        delivery: 'Доставка і оплата',\r\n        about: 'Про нас',\r\n    };\r\n\r\n    const pathSegments = location.pathname\r\n        .split('/')\r\n        .filter((crumb) => crumb !== '');\r\n\r\n    let currentLink = '';\r\n\r\n    const crumbs = pathSegments.map((crumb) => {\r\n        const decodedCrumb = decodeURIComponent(crumb);\r\n        currentLink += `/${decodedCrumb}`;\r\n\r\n        return (\r\n            <li className=\"breadcrumbs__list_item\" key={crumb}>\r\n                <NavLink\r\n                    to={currentLink}\r\n                    className=\"breadcrumbs__list_item_link\"\r\n                >\r\n                    {pathMapping[crumb] || decodedCrumb}\r\n                </NavLink>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    if (crumbs.length > 0) {\r\n        crumbs.unshift(\r\n            <li className=\"breadcrumbs__list_item\" key={nextId('crumb-item')}>\r\n                <NavLink to=\"/\" className=\"breadcrumbs__list_item_link\">\r\n                    Головна\r\n                </NavLink>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav className=\"breadcrumbs\">\r\n                <ol className=\"breadcrumbs__list\">{crumbs}</ol>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Breadcrumbs;\r\n"],"names":["_ref","title","onClick","className","_jsxs","concat","type","children","_jsx","props","modalIsActive","setModalIsActive","useState","setResetPasswordActive","_Fragment","htmlFor","placeholder","SubmitButton","Modal","active","setActive","isSubmitedText","maxwidth","paymentMethodList","id","label","value","inputName","selectedValue","onChange","selectedPaymentOption","setSelectedPaymentOption","useEffect","map","option","name","checked","AddressDelivery","_localOrderData$deliv","_localOrderData$deliv2","_localOrderData$deliv3","_localOrderData$deliv4","_localOrderData$deliv5","_localOrderData$deliv6","isResetAddress","handleSubmitOrderForm","animationClass","dispatch","useAppDispatch","localOrderData","JSON","parse","localStorage","getItem","stringify","debouncedUpdateOrderDelivery","useCallback","debounce","values","setDeliveryInfo","formik5","useFormik","initialValues","city","delivery","house","street","apartment","comment","paymentMethod","callNeeded","validate","errors","requiredMessage","onSubmit","setTimeout","resetForm","handleSubmit","noValidate","nextId","handleChange","onBlur","handleBlur","required","touched","ErrorMessageValidation","message","PaymentMethod","setFieldValue","rows","defaultProps","CustomSelect","isActive","setIsActive","selectFields","defaulTitle","selectNameOptions","activeOption","setActiveOption","closeSelect","e","target","closest","document","addEventListener","removeEventListener","field","index","fieldName","memo","formik4","deliveryCompanyName","region","postOffice","deliveryOptions","description","selectedDeliveryOption","setSelectedDeliveryOption","loading","error","orderNumber","useAppSelector","state","order","selectedDeliveryName","setSelectedDeliveryName","navigate","useNavigate","resetOrderFormData","deliveryType","makeOrder","optionValue","CompanyDelivery","ProductsList","productsInfoToCheckout","cart","item","quantityToCheckout","productName","skuCode","colorName","addSpaceToPrice","price","CustomerForm","setCustomerForm","loginLoading","auth","userData","userActions","userProfileData","userDataLoading","loadingUserPersonalInfo","newPasswordLoading","cartTotal","debouncedUpdateOrderContacts","setClientContacts","formik3","firstName","lastName","phoneNumber","email","forEach","formValidation","totalQuantityToCheckout","orderItems","length","alert","setValues","getUserProfileData","resetUserProfileDataStatus","resetUserLoginStatus","resetUserNewPasswordLoading","FirstNameInput","formik","LastNameInput","PhoneNumberInput","EmailInput","RegularCustomerAuth","setRegularLoggedIn","isLoginBtnClicked","setIsLoginBtnClicked","LoginForm","styleClass","GoogleAuth","additionalClass","textBtn","isTitleShow","FormUpdater","orderData","data","setOrderData","setItem","style","display","userSelect","visibility","CheckoutPage","newCustomerActive","setNewCustomerActive","regularCustomerActive","setRegularCustomerActive","customerForm","firstStepActive","setFirstStepActive","secondStepActive","setSecondStepActive","resetPasswordActive","regularLoggedIn","jwtToken","orderedProducts","colorHex","productSkuCode","quantity","filter","setOrderedProducts","handleCustomerClick","isRegular","handleStepClick","components","ResetPassword","NewCustomer","RegularCustomer","RegularCustomerLoggedIn","DeliveryAndPaymentForm","activeComponent","Breadcrumbs","submitForm","SummaryCart","bgColor","location","useLocation","pathMapping","catalog","product","checkout","success","cabinet","about","pathSegments","pathname","split","crumb","currentLink","crumbs","decodedCrumb","decodeURIComponent","NavLink","to","unshift"],"sourceRoot":""}