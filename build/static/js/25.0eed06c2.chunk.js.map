{"version":3,"file":"static/js/25.0eed06c2.chunk.js","mappings":"gLAcA,MAAMA,EAAoBC,IACtB,MAAM,eAAEC,EAAc,WAAEC,EAAU,UAAEC,GAAcH,GAC3CI,EAAmBC,IAAwBC,EAAAA,EAAAA,UAASJ,IACpDK,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GACrCG,GAAUC,EAAAA,EAAAA,IACXC,GAAUA,EAAMC,YAAYC,uBAE3BC,GAAQJ,EAAAA,EAAAA,IACTC,GAAUA,EAAMC,YAAYG,qBAE3BC,GAAWC,EAAAA,EAAAA,KAyBjB,OAvBAC,EAAAA,EAAAA,YAAU,KACFX,GAAaO,IACbN,GAAa,GACbH,GAAsBD,GACtBY,GAASG,EAAAA,EAAAA,OACb,GACD,CAACL,EAAOP,KAEXW,EAAAA,EAAAA,YAAU,KACU,cAAZT,GAA2BF,GAC3BS,GAASG,EAAAA,EAAAA,MACb,GACD,CAACV,KAEJS,EAAAA,EAAAA,YAAU,KACDf,GAAcA,EAAUiB,UAEzBjB,EAAUiB,QAAQC,MAAMC,QADxBlB,EACkC,2BAEA,GACtC,GACD,CAACA,EAAmBD,KAGnBoB,EAAAA,EAAAA,KAAA,UACIC,UAAS,gBAAAC,OAAkBrB,EAAoB,SAAW,IAC1DsB,QAASA,KACLlB,GAAa,GACbH,GAAsBD,GACtBY,GAASW,EAAAA,EAAAA,IAAsB1B,GAAgB,EAEnD2B,KAAK,SACL,aAAW,mFACXC,UAAW,EAAEC,UAEbC,EAAAA,EAAAA,MAAA,OACIP,UAAU,qBACVQ,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,MAAM,6BAA4BL,SAAA,EAElCP,EAAAA,EAAAA,KAAA,QACIa,SAAS,UACTC,SAAS,UACTC,EAAE,maAENf,EAAAA,EAAAA,KAAA,QACIe,EAAE,s+BACFC,KAAK,gBAGR,EAIjB,GAAeC,EAAAA,EAAAA,MAAKzC,E,yGCvCpB,MACA,EAAe,IAA0B,+D,6BC5BzC,MAAM0C,EAAcC,IAAgD,IAA/C,QAAEC,GAAuCD,EAC1D,MAAOE,EAAaC,IAAkBvC,EAAAA,EAAAA,UAAiB,KAChDwC,EAAqBC,IAA0BzC,EAAAA,EAAAA,UAAiB,KAChE0C,EAAYC,IAAiB3C,EAAAA,EAAAA,UAAqB,CAAC,IACnD4C,EAAsBC,IACzB7C,EAAAA,EAAAA,WAAkB,GAEhB8C,GAAW1C,EAAAA,EAAAA,IAAgBC,GAAUA,EAAM0C,KAAKD,YAChD,MAAEE,EAAK,kBAAEC,EAAiB,SAAEC,EAAQ,QAAEC,EAAO,SAAEC,EAAQ,KAAEC,GAC3DhB,GAEGiB,EAAcC,IAAmBvD,EAAAA,EAAAA,UAIrC,CAAEqD,KAAM,GAAIG,IAAK,GAAIC,eAAgB,KAClCC,GAAWtD,EAAAA,EAAAA,IAAgBC,GAAUA,EAAMsD,KAAKD,WAChDE,GAA4BC,EAAAA,EAAAA,QAAuB,MACnDnD,GAAWC,EAAAA,EAAAA,MAkBjBC,EAAAA,EAAAA,YAAU,KACD0C,EAAaE,KAAQnB,GAAYS,GACtCD,EACIC,EAASgB,MACJC,GACGA,EAAKpE,iBAAmBwD,GACxBY,EAAKC,WAAaV,EAAaE,MAE1C,GACF,CAACV,EAAUT,EAASiB,KAEvB1C,EAAAA,EAAAA,YAAU,KA3BcqD,EACpBC,EACAC,KAEA,GAAID,GAAgB,IAAM,CACtB,MACME,IADaF,GACGG,iBAAiBC,QAAQ,IAAK,KACpD/B,EAAe6B,EACnB,CACA,GAAID,GAAwBA,GAAwB,IAAM,CACtD,MACMC,IADaD,GACGE,iBAAiBC,QAAQ,IAAK,KACpD7B,EAAuB2B,EAC3B,GAeAH,CAAgBjB,EAAOC,EAAkB,GAC1C,CAACD,EAAOC,IA4GX,OACIxB,EAAAA,EAAAA,MAAA,OACIP,UAAS,gBAAAC,OAC2B,iGAAhCmC,EAAaG,eACP,eACA,GAAE,KACRjC,SAAA,EAEJP,EAAAA,EAAAA,KAAA,OACIC,UAAU,yBACVqD,IAAKX,EAA0BpC,SAEjB,OAAb4B,GAAqBM,GAClBzC,EAAAA,EAAAA,KAACxB,EAAAA,EAAgB,CACbE,eAAgBwD,EAChBvD,WAAYwD,EACZvD,UAAW+D,IAGf,KAGPV,GACGzB,EAAAA,EAAAA,MAAA,OAAKP,UAAU,2BAA0BM,SAAA,CAAE0B,EAAS,OACpD,MACJjC,EAAAA,EAAAA,KAACuD,EAAAA,EAAY,CACTC,YAAapC,EACbM,cAAeA,EACfD,WAAYA,EACZa,gBAAiBA,EACjBD,aAAcA,KAElBrC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gEAA+DM,SA9H9C,iGAAhC8B,EAAaG,gBAEThC,EAAAA,EAAAA,MAAAiD,EAAAA,SAAA,CAAAlD,SAAA,EACIC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,8BAA6BM,SAAA,EACxCP,EAAAA,EAAAA,KAAA,QAAMC,UAAU,6BAA4BM,SACvC8B,EAAaG,kBAElBxC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,wBAAuBM,UACnCC,EAAAA,EAAAA,MAAA,QAAMP,UAAU,kFAAiFM,SAAA,CAC5F0B,EACKV,GAAuBS,EACvBX,GAAeU,EACpB,gBAIb/B,EAAAA,EAAAA,KAAA,UACIC,UAAU,2BACVI,KAAK,SACL,aAAW,yIACXF,QAASA,IAAMV,GAASiE,EAAAA,EAAAA,KAAsB,IAAOnD,UAErDP,EAAAA,EAAAA,KAAA,OACIC,UAAU,4BACVQ,MAAM,KACNC,OAAO,KAAIH,UAEXP,EAAAA,EAAAA,KAAA,OAAK2D,KAAI,GAAAzD,OAAK0D,EAAAA,EAAa,2BAO3CpD,EAAAA,EAAAA,MAAAiD,EAAAA,SAAA,CAAAlD,SAAA,EACIC,EAAAA,EAAAA,MAAA,OACIP,UACIgC,EACM,+DACA,8BACT1B,SAAA,CAEA0B,GACGjC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mDAAkDM,UAC9DC,EAAAA,EAAAA,MAAA,QAAMP,UAAU,wEAAuEM,SAAA,CAClFc,GAAeU,EAAM,YAG9B,MACJ/B,EAAAA,EAAAA,KAAA,QAAMC,UAAU,wBAAuBM,UACnCC,EAAAA,EAAAA,MAAA,QAAMP,UAAU,mCAAkCM,SAAA,CAC7C0B,EACKV,GAAuBS,EACvBX,GAAeU,EACpB,gBAIb/B,EAAAA,EAAAA,KAAA,UACIC,UAAS,4BAAAC,OACLyB,EAAuB,eAAiB,IAE5CtB,KAAK,SACL,aAAW,6EACXwD,SAAUlC,EACVxB,QAASA,KACLV,GACIqE,EAAAA,EAAAA,IAAqB,CACjBpF,eAAgBwD,EAChBa,SAAUV,EAAaE,OAG/B9C,GAASsE,EAAAA,EAAAA,KAAc,GAAM,EAC/BxD,SAEDoB,GACG3B,EAAAA,EAAAA,KAAA,OACIC,UAAU,6BACV+D,IAAKC,EACLC,IAAI,2HAGRlE,EAAAA,EAAAA,KAAA,OACIC,UAAU,4BACVQ,MAAM,KACNC,OAAO,KAAIH,UAEXP,EAAAA,EAAAA,KAAA,OAAK2D,KAAI,GAAAzD,OAAK0D,EAAAA,EAAa,2BA0CzC,EAId,GAAe3C,EAAAA,EAAAA,MAAKC,E,k8JCzJb,MAAMiD,EAAcC,GACcC,KAAKC,MACtCD,KAAKE,UAAUH,IAECI,MAAK,CAACC,EAAGC,KACzB,MAAMC,EAAuB,CACzB,+FACA,2EACA,iEAEEC,EAAWD,EAAqBE,QAAQJ,EAAEjC,gBAC1CsC,EAAWH,EAAqBE,QAAQH,EAAElC,gBAChD,OAAIoC,EAAWE,EACJ,EAEPF,EAAWE,GACH,EAEL,CAAC,IAmBVvB,EAAgB9E,IAClB,MAAMsG,GAAgBnC,EAAAA,EAAAA,WAChB,YACFY,EAAW,WACX/B,EAAU,cACVC,EAAa,aACbW,EAAY,gBACZC,GACA7D,GACE,QACFyD,EAAO,KACPE,EAAI,iBACJ4C,EAAgB,aAChBZ,EAAY,aACZa,EAAY,SACZ9C,GACAqB,GAEG0B,EAAmBC,IAAwBpG,EAAAA,EAAAA,UAAiB,IAC5DqG,EAAeC,IAAoBtG,EAAAA,EAAAA,WAAS,GAC7CuG,GAAqBC,EAAAA,EAAAA,IAAO,WAE3BC,EAAUC,IAAe1G,EAAAA,EAAAA,UAAiB,KAC1CG,EAASwG,IAAc3G,EAAAA,EAAAA,UAAkB,cACzCQ,EAAOoG,IAAY5G,EAAAA,EAAAA,UAAyB,OAE5C6G,EAAeC,IAAoB9G,EAAAA,EAAAA,WAAS,GAC7C+G,GAAkB3G,EAAAA,EAAAA,IACnBC,GAAUA,EAAM2G,mBAAmBC,aAElCC,GAAoB9G,EAAAA,EAAAA,IACrBC,GAAUA,EAAM2G,mBAAmB1D,eAElC5C,GAAWC,EAAAA,EAAAA,KACXwG,GAAWC,EAAAA,EAAAA,MACXC,EAlDkBC,EACxBjC,EACAa,IAEOd,EAAWC,GAAcI,MAAK,CAACC,EAAGC,IACjCD,EAAErC,OAAS6C,EAAa,GAAGqB,OACnB,EAER5B,EAAEtC,OAAS6C,EAAa,GAAGqB,MACpB,EAEJ,IAuCUD,CAAoBjC,EAAca,IAEvDtF,EAAAA,EAAAA,YAAU,KACN,IAAKyF,GAAiBH,EAAasB,OAAS,EAAG,CAC3C,MAAM,KAAEnE,EAAI,GAAEoE,EAAE,eAAEhE,GAAmB4D,EAAa,GAClD9D,EAAgB,CAAEF,OAAMG,IAAKiE,EAAIhE,mBACjC2C,EAAqB,EACzB,IACD,CAACC,EAAeH,KAEnBtF,EAAAA,EAAAA,YAAU,KACN+B,EAAc,CACV,CAACwD,GAAoB,CACjBM,SAAUP,EAAa,GAAGwB,WAAaC,IAE7C,GACH,CAACzB,KAEJtF,EAAAA,EAAAA,YAAU,KACF6F,GACImB,OAAOC,KAAKnF,GAAY8E,OAASH,EAAaG,QAC9C7E,GAAemF,IAAI,IACZA,EACH,CAAC3B,GAAoB,CACjBM,eAIhB,GACD,CAACA,EAAUP,KAEdtF,EAAAA,EAAAA,YAAU,KACDiG,GACDE,GAAmBG,GACnBC,EAAS,YAADhG,OAAa4F,GAAe5F,OAAG+F,EAAkBO,IAC7D,GACD,CAACZ,EAAeE,EAAiBG,IAEpC,MAmDMa,EAAgBA,CAAC1E,EAAc2E,KAAmB,IAADC,EACnD,IAAIC,GACAjH,EAAAA,EAAAA,KAACkH,EAAAA,EAAQ,CAACxG,OAAQ,IAAIH,UAClBP,EAAAA,EAAAA,KAAA,OACIC,UAAU,sBACV+D,KAAsB,QAAjBgD,EAAAvF,EAAWsF,UAAM,IAAAC,OAAA,EAAjBA,EAAmBxB,WAAY,GACpCtG,QAAQ,OACRuB,MAAO,IACPC,OAAQ,IACRwD,IAAK9B,MAOjB,MAHgB,YAAZlD,IACA+H,GAASjH,EAAAA,EAAAA,KAACmH,EAAAA,EAAM,KAEbF,CAAM,EAGXG,EAAmBC,IACrBA,EAAEC,iBACFC,aAAaC,QAAQ,iBAAkBtF,GACvCqF,aAAaC,QACT,eACAnD,KAAKE,UAAU,CACXhC,IAAKF,EAAaE,IAClBkF,UAAWpF,EAAaD,KACxBsF,YAAa,MAGrBjI,GAASkI,EAAAA,EAAAA,IAAiBzF,IAC1BzC,GACImI,EAAAA,EAAAA,IAAmB,CACfxF,KAAMC,EAAaD,KACnBoE,GAAInE,EAAaE,IACjBC,eAAgB,MAGxBqD,GAAiB,EAAK,EAG1B,OACIrF,EAAAA,EAAAA,MAAAiD,EAAAA,SAAA,CAAAlD,SAAA,EACIP,EAAAA,EAAAA,KAAC6H,EAAAA,GAAO,CACJ5H,UAAU,4BACV6H,GAAE,YAAA5H,OAAcgC,GAAOhC,OAAGmC,EAAaE,KACvCpC,QAASiH,EAAgB7G,UAEzBC,EAAAA,EAAAA,MAACuH,EAAAA,GAAM,CACH9H,UAAU,uBACV+H,cAAe,EACfC,gBAAgB,EAChBC,SAAWC,IACPpD,EAAclF,QAAUsI,CAAiB,EAE7CC,cAAgBD,IACZ/B,EAAaiC,SAAQ,CAACvF,EAAMiE,KACxB,GAAIoB,EAAOG,cAAgBvB,EAAO,CAC9B,MAAM,KAAE3E,EAAI,GAAEoE,EAAE,eAAEhE,GAAmBM,EACrCR,EAAgB,CACZF,OACAG,IAAKiE,EACLhE,kBAER,KAEJ6C,GAAiB,EAAK,EACxB9E,SAAA,CAEW,YAAZrB,GACGc,EAAAA,EAAAA,KAACuI,EAAAA,GAAW,CAAAhI,UACRP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BM,UACxCP,EAAAA,EAAAA,KAACmH,EAAAA,EAAM,QAIf,GAEqB,IAAxBf,EAAaG,SACVvG,EAAAA,EAAAA,KAACuI,EAAAA,GAAW,CAAAhI,UACRP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BM,UACxCP,EAAAA,EAAAA,KAAA,OACIC,UAAU,sBACV+D,IAAK0C,EACLxC,IAAK9B,QAKpBgE,EAAaoC,KAAI,CAAClC,EAAOS,KAElB/G,EAAAA,EAAAA,KAACuI,EAAAA,GAAW,CAAAhI,UAGRP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BM,SACvCuG,EAAc1E,EAAM2E,MACnB,gBAAA7G,OAJegC,GAAOhC,OAAGoG,EAAME,aAUzDhG,EAAAA,EAAAA,MAAA,OAAKP,UAAU,0CAAyCM,SAAA,EACpDC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,4BAA2BM,SAAA,EACtCP,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sBAAqBM,UAC/BP,EAAAA,EAAAA,KAAC6H,EAAAA,GAAO,CACJ5H,UAAU,2BACV6H,GAAE,YAAA5H,OAAcgC,GAAOhC,OAAGmC,EAAaE,KACvCpC,QAASiH,EAAgB7G,SAExB6B,OAGTpC,EAAAA,EAAAA,KAAA,YAAUC,UAAU,iCAAgCM,SAC/C6F,EAAaoC,KAAI,CAAClC,EAAOS,KACtB,MAAM,KAAE3E,EAAI,GAAEoE,EAAE,eAAEhE,GAAmB8D,EACrC,OACI9F,EAAAA,EAAAA,MAAA,SACIP,UAAU,+BAA8BM,SAAA,EAGxCP,EAAAA,EAAAA,KAAA,SACIC,UAAU,+BACVI,KAAK,QACL+B,KAAMkD,EACN,aAAYlD,EACZqG,MAAOjC,EACPkC,QACIrG,EAAaD,OAASA,IACpBgD,GAA2B,IAAV2B,EAEvB4B,SAAUA,IAtLpBC,EACtBtC,EACAS,EACAP,EACAhE,KAEAF,EAAgB,CAAEF,KAAMkE,EAAO/D,IAAKiE,EAAIhE,mBACxC6C,GAAiB,GACjBF,EAAqB4B,GAEJ,OAAbhC,QAAa,IAAbA,GAAAA,EAAelF,SACfkF,EAAclF,QAAQgJ,QAAQ9B,GAElCrB,EAAW,QA+BG,OAAVnG,GACAkC,GACAkF,OAAOC,KAAKnF,GAAY8E,OAASH,EAAaG,QAhClDuC,iBACI,IACIrD,EAAY,IACZC,EAAW,WAEX,MAAMqD,QAAiBC,MAAM,GAAD9I,OAAI+I,EAAAA,EAAQ,uBAAuB,CAC3DC,OAAQ,OACRC,KAAM9E,KAAKE,UAAU,CACjB7F,eAAgBwD,EAChBa,SAAUyD,IAEd4C,QAAS,CACL,eAAgB,qCAIlBnC,QAAyB8B,EAASM,OAExC,IAAKN,EAASO,GAAI,MAAM,IAAIC,MAAM,wBAElC9D,EAAYwB,EAAOR,WACnBd,EAAS,MACTD,EAAW,YACf,CAAE,MAAO8D,GACL7D,EAAS6D,GACT9D,EAAW,UACXD,EAAYiB,EAChB,CACJ,CAMI+C,EAAW,EAuIqBb,CACIxG,EACA2E,EACAP,EACAhE,MAIZxC,EAAAA,EAAAA,KAAA,QACIC,UAAS,kCAAAC,OAEL,iGADAsC,EAEM,+CACA,IAEV1C,MAAO,CAAE4J,gBAAgB,GAADxJ,OAAKsG,SA5B5BjB,EAAAA,EAAAA,IAAO,eA8BR,UAKxBvF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,4BAA2BM,SAAEyE,SAE/C,EAIX,GAAe/D,EAAAA,EAAAA,MAAKsC,E","sources":["shared-components/AddToFavoriteBtn/AddToFavoriteBtn.tsx","assets/icons/cart/cart-added.svg","shared-components/ProductCard/ProductCard.tsx","shared-components/ProductCard/SliderImages/SliderImages.tsx"],"sourcesContent":["import { useEffect, memo, useState, RefObject } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport {\r\n    toggleFavoriteProduct,\r\n    resetFavoriteStatus,\r\n} from '../../store/reducers/userActionsSlice';\r\nimport './AddToFavoriteBtn.scss';\r\n\r\ninterface PropsType {\r\n    productSkuCode: string;\r\n    isFavorite: boolean;\r\n    reference?: RefObject<HTMLDivElement | null>;\r\n}\r\n\r\nconst AddToFavoriteBtn = (props: PropsType) => {\r\n    const { productSkuCode, isFavorite, reference } = props;\r\n    const [isAddedToFavorite, setIsAddedToFavorite] = useState(isFavorite);\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const loading = useAppSelector(\r\n        (state) => state.userActions.loadingAddToFavorite\r\n    );\r\n    const error = useAppSelector(\r\n        (state) => state.userActions.errorAddToFavorite\r\n    );\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (isClicked && error) {\r\n            setIsClicked(false);\r\n            setIsAddedToFavorite(!isAddedToFavorite);\r\n            dispatch(resetFavoriteStatus());\r\n        }\r\n    }, [error, isClicked]);\r\n\r\n    useEffect(() => {\r\n        if (loading === 'succeeded' && isClicked) {\r\n            dispatch(resetFavoriteStatus());\r\n        }\r\n    }, [loading]);\r\n\r\n    useEffect(() => {\r\n        if (!reference || !reference.current) return;\r\n        if (isAddedToFavorite) {\r\n            reference.current.style.cssText = 'transform: translateX(0)';\r\n        } else {\r\n            reference.current.style.cssText = '';\r\n        }\r\n    }, [isAddedToFavorite, reference]);\r\n\r\n    return (\r\n        <button\r\n            className={`favorite-btn ${isAddedToFavorite ? 'active' : ''}`}\r\n            onClick={() => {\r\n                setIsClicked(true);\r\n                setIsAddedToFavorite(!isAddedToFavorite);\r\n                dispatch(toggleFavoriteProduct(productSkuCode));\r\n            }}\r\n            type=\"button\"\r\n            aria-label=\"додати в обране\"\r\n            tabIndex={-1}\r\n        >\r\n            <svg\r\n                className=\"favorite-btn__icon\"\r\n                width=\"20\"\r\n                height=\"17\"\r\n                viewBox=\"0 0 20 17\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n                <path\r\n                    fillRule=\"evenodd\"\r\n                    clipRule=\"evenodd\"\r\n                    d=\"M10 2.11572C11.0063 0.78662 12.6206 0 14.4644 0C15.9321 0.00146 17.3389 0.58057 18.377 1.60986C19.4146 2.63965 19.9985 4.03516 20 5.49072C20 11.6904 10.7329 16.708 10.3384 16.9155C10.2344 16.9707 10.1182 17 10 17C9.8818 17 9.7656 16.9707 9.6616 16.9155C9.2671 16.708 0 11.6904 0 5.49072C0.00146 4.03516 0.58545 2.63965 1.62305 1.60986C2.66113 0.58057 4.06787 0.00146 5.53564 0C7.37939 0 8.9937 0.78662 10 2.11572Z\"\r\n                />\r\n                <path\r\n                    d=\"M14.4643 0C12.6205 0 11.0063 0.786435 10 2.11576C8.99375 0.786435 7.37946 0 5.53571 0C4.06806 0.00164083 2.66099 0.580669 1.6232 1.61005C0.585411 2.63944 0.00165423 4.03511 0 5.49088C0 11.6903 9.26696 16.7082 9.66161 16.9154C9.76562 16.9709 9.88189 17 10 17C10.1181 17 10.2344 16.9709 10.3384 16.9154C10.733 16.7082 20 11.6903 20 5.49088C19.9983 4.03511 19.4146 2.63944 18.3768 1.61005C17.339 0.580669 15.9319 0.00164083 14.4643 0ZM10 15.4807C8.36964 14.5384 1.42857 10.2458 1.42857 5.49088C1.42999 4.41085 1.86316 3.37546 2.63309 2.61176C3.40302 1.84807 4.44687 1.41841 5.53571 1.417C7.27232 1.417 8.73036 2.33451 9.33929 3.80819C9.3931 3.93814 9.48465 4.04928 9.60229 4.1275C9.71994 4.20572 9.85837 4.24748 10 4.24748C10.1416 4.24748 10.2801 4.20572 10.3977 4.1275C10.5154 4.04928 10.6069 3.93814 10.6607 3.80819C11.2696 2.33185 12.7277 1.417 14.4643 1.417C15.5531 1.41841 16.597 1.84807 17.3669 2.61176C18.1368 3.37546 18.57 4.41085 18.5714 5.49088C18.5714 10.2387 11.6286 14.5375 10 15.4807Z\"\r\n                    fill=\"#262626\"\r\n                />\r\n            </svg>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default memo(AddToFavoriteBtn);\r\n","var _rect, _rect2, _path, _rect3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCartAdded(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 40,\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 40,\n    height: 40,\n    fill: \"white\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 940,\n    height: 1912,\n    transform: \"translate(-111 -1353)\",\n    fill: \"white\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M33.3846 14.7692C33.3846 17.9555 30.8016 20.5385 27.6154 20.5385C24.4291 20.5385 21.8462 17.9555 21.8462 14.7692C21.8462 11.583 24.4291 9 27.6154 9C30.8016 9 33.3846 11.583 33.3846 14.7692ZM24.0096 14.9192L24.64 14.2355L26.5314 16.2865L30.5907 11.8846L31.2211 12.5683L26.5314 17.6538L24.0096 14.9192ZM25.1598 21.2443C25.6945 21.4471 26.2608 21.5857 26.8494 21.6505L26.5008 23.0194C26.2927 23.8334 25.6228 24.3923 24.834 24.3923H23.7409H15.8704H14.8044C14.0025 24.3923 13.3047 23.8222 13.1105 22.9904L10.815 13.177H8.87449C8.39352 13.177 8 12.7564 8 12.2423C8 11.7283 8.39352 11.3077 8.87449 11.3077H10.8159C11.2042 11.3051 11.5821 11.4418 11.8891 11.696C12.1961 11.9502 12.4143 12.3071 12.5089 12.7097L14.8044 22.5231H24.834L25.1598 21.2443ZM15.8704 24.3923C17.309 24.3923 18.4939 25.6587 18.4939 27.1962C18.4939 28.7336 17.309 30 15.8704 30C14.4319 30 13.247 28.7336 13.247 27.1962C13.247 25.6587 14.4319 24.3923 15.8704 24.3923ZM23.7409 24.3923C25.1794 24.3923 26.3644 25.6587 26.3644 27.1962C26.3644 28.7336 25.1794 30 23.7409 30C22.3023 30 21.1174 28.7336 21.1174 27.1962C21.1174 25.6587 22.3023 24.3923 23.7409 24.3923ZM14.1215 14.1116H20.7231C20.7027 14.3281 20.6923 14.5475 20.6923 14.7693C20.6923 15.1826 20.7285 15.5874 20.798 15.9808H14.5587L14.1215 14.1116ZM15.8704 26.2615C16.3628 26.2615 16.7449 26.6709 16.7449 27.1962C16.7449 27.7223 16.3619 28.1308 15.8704 28.1308C15.3781 28.1308 14.996 27.7214 14.996 27.1962C14.996 26.67 15.379 26.2615 15.8704 26.2615ZM23.7409 26.2615C24.2332 26.2615 24.6154 26.6709 24.6154 27.1962C24.6154 27.7223 24.2324 28.1308 23.7409 28.1308C23.2486 28.1308 22.8664 27.7214 22.8664 27.1962C22.8664 26.67 23.2494 26.2615 23.7409 26.2615Z\",\n    fill: \"#C57100\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: -19.5,\n    y: -139.5,\n    width: 79,\n    height: 199,\n    rx: 4.5,\n    stroke: \"#9747FF\",\n    strokeDasharray: \"10 5\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCartAdded);\nexport default __webpack_public_path__ + \"static/media/cart-added.46a1aa0030590bc66f76ba05426e37f0.svg\";\nexport { ForwardRef as ReactComponent };","import { useState, useEffect, memo, useRef } from 'react';\r\nimport { ProductCardType } from '../../types/types';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport {\r\n    openPopUpCart,\r\n    openPopUpNotification,\r\n} from '../../store/reducers/modalsSlice';\r\nimport { addProductToCartBody } from '../../store/reducers/cartSlice';\r\nimport AddToFavoriteBtn from '../AddToFavoriteBtn/AddToFavoriteBtn';\r\nimport headerSprites from '../../assets/icons/header/header-sprite.svg';\r\nimport SliderImages, { ImagesData } from './SliderImages/SliderImages';\r\nimport cartAdded from '../../assets/icons/cart/cart-added.svg';\r\nimport 'swiper/css';\r\nimport 'swiper/css/pagination';\r\nimport './ProductCard.scss';\r\n\r\nconst ProductCard = ({ product }: { product: ProductCardType }) => {\r\n    const [priceSpaced, setPriceSpaced] = useState<string>('');\r\n    const [discountPriceSpaced, setDiscountPriceSpaced] = useState<string>('');\r\n    const [imagesData, setImagesData] = useState<ImagesData>({});\r\n    const [isElementAddedToCart, setIsElementAddedToCart] =\r\n        useState<boolean>(false);\r\n\r\n    const cartBody = useAppSelector((state) => state.cart.cartBody);\r\n    const { price, priceWithDiscount, discount, skuCode, favorite, name } =\r\n        product;\r\n\r\n    const [currentColor, setCurrentColor] = useState<{\r\n        name: string;\r\n        hex: string;\r\n        quantityStatus: string;\r\n    }>({ name: '', hex: '', quantityStatus: '' });\r\n    const jwtToken = useAppSelector((state) => state.auth.jwtToken);\r\n    const favoriteBtnProductCardRef = useRef<HTMLDivElement>(null);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const addSpaceToPrice = (\r\n        currentPrice: number,\r\n        currentDiscountPrice: number | null\r\n    ) => {\r\n        if (currentPrice >= 1000) {\r\n            const temporary = +currentPrice;\r\n            const res = temporary.toLocaleString().replace(',', ' ');\r\n            setPriceSpaced(res);\r\n        }\r\n        if (currentDiscountPrice && currentDiscountPrice >= 1000) {\r\n            const temporary = +currentDiscountPrice;\r\n            const res = temporary.toLocaleString().replace(',', ' ');\r\n            setDiscountPriceSpaced(res);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!currentColor.hex || !product || !cartBody) return;\r\n        setIsElementAddedToCart(\r\n            cartBody.some(\r\n                (item) =>\r\n                    item.productSkuCode === skuCode &&\r\n                    item.colorHex === currentColor.hex\r\n            )\r\n        );\r\n    }, [cartBody, product, currentColor]);\r\n\r\n    useEffect(() => {\r\n        addSpaceToPrice(price, priceWithDiscount);\r\n    }, [price, priceWithDiscount]);\r\n\r\n    // const handleAddProductToCart = () => {\r\n    //     if (isElementAddedToCart) return;\r\n    //     dispatch(\r\n    //         addProductToCartBody({\r\n    //             productSkuCode: skuCode,\r\n    //             colorHex: currentColor.hex,\r\n    //         })\r\n    //     );\r\n    //     dispatch(openPopUpCart(true));\r\n    // };\r\n\r\n    const renderProductStatus = () => {\r\n        if (currentColor.quantityStatus === 'Немає в наявності') {\r\n            return (\r\n                <>\r\n                    <div className=\"purchase-block__price-block\">\r\n                        <span className=\"purchase-block__out-status\">\r\n                            {currentColor.quantityStatus}\r\n                        </span>\r\n                        <span className=\"purchase-block__price\">\r\n                            <span className=\"purchase-block__current-currency purchase-block__current-currency_not-available\">\r\n                                {discount\r\n                                    ? discountPriceSpaced || priceWithDiscount\r\n                                    : priceSpaced || price}\r\n                                {' UAH'}\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                    <button\r\n                        className=\"purchase-block__cart-btn\"\r\n                        type=\"button\"\r\n                        aria-label=\"повідомити про наявність\"\r\n                        onClick={() => dispatch(openPopUpNotification(true))}\r\n                    >\r\n                        <svg\r\n                            className=\"purchase-block__bell-icon\"\r\n                            width=\"18\"\r\n                            height=\"18\"\r\n                        >\r\n                            <use href={`${headerSprites}#iconoir_bell`} />\r\n                        </svg>\r\n                    </button>\r\n                </>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <div\r\n                    className={\r\n                        discount\r\n                            ? 'purchase-block__price-block purchase-block__price-block_sale'\r\n                            : 'purchase-block__price-block'\r\n                    }\r\n                >\r\n                    {discount ? (\r\n                        <span className=\"purchase-block__price purchase-block__price_sale\">\r\n                            <span className=\"purchase-block__current-currency purchase-block__current-currency_pd0\">\r\n                                {priceSpaced || price} UAH\r\n                            </span>\r\n                        </span>\r\n                    ) : null}\r\n                    <span className=\"purchase-block__price\">\r\n                        <span className=\"purchase-block__current-currency\">\r\n                            {discount\r\n                                ? discountPriceSpaced || priceWithDiscount\r\n                                : priceSpaced || price}\r\n                            {' UAH'}\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n                <button\r\n                    className={`purchase-block__cart-btn ${\r\n                        isElementAddedToCart ? 'reset-border' : ''\r\n                    }`}\r\n                    type=\"button\"\r\n                    aria-label=\"додати в кошик\"\r\n                    disabled={isElementAddedToCart}\r\n                    onClick={() => {\r\n                        dispatch(\r\n                            addProductToCartBody({\r\n                                productSkuCode: skuCode,\r\n                                colorHex: currentColor.hex,\r\n                            })\r\n                        );\r\n                        dispatch(openPopUpCart(true));\r\n                    }}\r\n                >\r\n                    {isElementAddedToCart ? (\r\n                        <img\r\n                            className=\"purchase-block__added-cart\"\r\n                            src={cartAdded}\r\n                            alt=\"товар додано в корзину\"\r\n                        />\r\n                    ) : (\r\n                        <svg\r\n                            className=\"purchase-block__cart-icon\"\r\n                            width=\"20\"\r\n                            height=\"20\"\r\n                        >\r\n                            <use href={`${headerSprites}#card-icon`} />\r\n                        </svg>\r\n                    )}\r\n                </button>\r\n            </>\r\n        );\r\n    };\r\n    return (\r\n        <div\r\n            className={`product-card ${\r\n                currentColor.quantityStatus === 'Немає в наявності'\r\n                    ? 'out-of-stock'\r\n                    : ''\r\n            } `}\r\n        >\r\n            <div\r\n                className=\"product-card__favorite\"\r\n                ref={favoriteBtnProductCardRef}\r\n            >\r\n                {favorite !== null && jwtToken ? (\r\n                    <AddToFavoriteBtn\r\n                        productSkuCode={skuCode}\r\n                        isFavorite={favorite}\r\n                        reference={favoriteBtnProductCardRef}\r\n                    />\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n            {discount ? (\r\n                <div className=\"product-card__sales-text\">{discount}%</div>\r\n            ) : null}\r\n            <SliderImages\r\n                productData={product}\r\n                setImagesData={setImagesData}\r\n                imagesData={imagesData}\r\n                setCurrentColor={setCurrentColor}\r\n                currentColor={currentColor}\r\n            />\r\n            <div className=\"product-card__purchase-block purchase-block swiper-no-swiping\">\r\n                {renderProductStatus()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(ProductCard);\r\n","import { useState, useEffect, useRef, memo, MouseEvent, useMemo } from 'react';\r\nimport { SwiperSlide, Swiper } from 'swiper/react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport nextId from 'react-id-generator';\r\nimport type swiper from 'swiper';\r\nimport LazyLoad from 'react-lazy-load';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\r\nimport {\r\n    updateProductColor,\r\n    updateProductSku,\r\n} from '../../../store/reducers/productInformationSlice';\r\nimport 'swiper/css';\r\nimport 'swiper/css/pagination';\r\nimport Loader from '../../Loader';\r\nimport imageNotFound from '../../../assets/images/error-images/image-not-found_small.png';\r\nimport {\r\n    Loading,\r\n    ProductCardType,\r\n    ColorDtoList,\r\n    ImageDtoList,\r\n} from '../../../types/types';\r\nimport { API_BASE } from '../../../utils/API_BASE';\r\n\r\ntype TSwiper = swiper & {\r\n    slides: {\r\n        swiperSlideSize: number;\r\n    }[];\r\n};\r\n\r\nexport type ImageType = {\r\n    imageSrc: string;\r\n};\r\n\r\nexport type ImagesData = Record<number, ImageType>;\r\n\r\ntype ImageSrc = {\r\n    id: string;\r\n    imagePath: string;\r\n    color: string;\r\n};\r\n\r\ntype Props = {\r\n    productData: ProductCardType;\r\n    imagesData: ImagesData;\r\n    setImagesData: React.Dispatch<React.SetStateAction<ImagesData>>;\r\n    setCurrentColor: React.Dispatch<\r\n        React.SetStateAction<{\r\n            name: string;\r\n            hex: string;\r\n            quantityStatus: string;\r\n        }>\r\n    >;\r\n    currentColor: {\r\n        name: string;\r\n        hex: string;\r\n        quantityStatus: string;\r\n    };\r\n};\r\n\r\nexport const sortColors = (colorDtoList: ColorDtoList[]) => {\r\n    const colorDtoSort: ColorDtoList[] = JSON.parse(\r\n        JSON.stringify(colorDtoList)\r\n    );\r\n    return colorDtoSort.sort((a, b) => {\r\n        const valuesOfAvailability = [\r\n            'Немає в наявності',\r\n            'Закінчується',\r\n            'В наявності',\r\n        ];\r\n        const compareA = valuesOfAvailability.indexOf(a.quantityStatus);\r\n        const compareB = valuesOfAvailability.indexOf(b.quantityStatus);\r\n        if (compareA < compareB) {\r\n            return 1;\r\n        }\r\n        if (compareA > compareB) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    });\r\n};\r\n\r\nconst sortColorByFirstImg = (\r\n    colorDtoList: ColorDtoList[],\r\n    imageDtoList: ImageDtoList[]\r\n) => {\r\n    return sortColors(colorDtoList).sort((a, b) => {\r\n        if (a.name === imageDtoList[0].color) {\r\n            return -1;\r\n        }\r\n        if (b.name === imageDtoList[0].color) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n};\r\n\r\nconst SliderImages = (props: Props) => {\r\n    const cardSliderRef = useRef<TSwiper>();\r\n    const {\r\n        productData,\r\n        imagesData,\r\n        setImagesData,\r\n        currentColor,\r\n        setCurrentColor,\r\n    } = props;\r\n    const {\r\n        skuCode,\r\n        name,\r\n        shortDescription,\r\n        colorDtoList,\r\n        imageDtoList,\r\n        favorite,\r\n    } = productData;\r\n\r\n    const [currentIndexColor, setCurrentIndexColor] = useState<number>(0);\r\n    const [isColorChosen, setIsColorChosen] = useState(false);\r\n    const uniqIdForInputName = nextId('color-');\r\n\r\n    const [imageSrc, setImageSrc] = useState<string>('');\r\n    const [loading, setLoading] = useState<Loading>('succeeded');\r\n    const [error, setError] = useState<unknown | null>(null);\r\n\r\n    const [isLinkClicked, setIsLinkClicked] = useState(false);\r\n    const currentSkuStore = useAppSelector(\r\n        (state) => state.productInformation.currentSku\r\n    );\r\n    const currentColorStore = useAppSelector(\r\n        (state) => state.productInformation.currentColor\r\n    );\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n    const colorDtoSort = sortColorByFirstImg(colorDtoList, imageDtoList);\r\n\r\n    useEffect(() => {\r\n        if (!isColorChosen && imageDtoList.length > 0) {\r\n            const { name, id, quantityStatus } = colorDtoSort[0];\r\n            setCurrentColor({ name, hex: id, quantityStatus });\r\n            setCurrentIndexColor(0);\r\n        }\r\n    }, [isColorChosen, imageDtoList]);\r\n\r\n    useEffect(() => {\r\n        setImagesData({\r\n            [currentIndexColor]: {\r\n                imageSrc: imageDtoList[0].imagePath || imageNotFound,\r\n            },\r\n        });\r\n    }, [imageDtoList]);\r\n\r\n    useEffect(() => {\r\n        if (imageSrc) {\r\n            if (Object.keys(imagesData).length < colorDtoSort.length) {\r\n                setImagesData((prev) => ({\r\n                    ...prev,\r\n                    [currentIndexColor]: {\r\n                        imageSrc,\r\n                    },\r\n                }));\r\n            }\r\n        }\r\n    }, [imageSrc, imageDtoList]);\r\n\r\n    useEffect(() => {\r\n        if (!isLinkClicked) return;\r\n        if (currentSkuStore && currentColorStore) {\r\n            navigate(`/product/${currentSkuStore}${currentColorStore.id}`);\r\n        }\r\n    }, [isLinkClicked, currentSkuStore, currentColorStore]);\r\n\r\n    const handleSlideChange = (\r\n        color: string,\r\n        index: number,\r\n        id: string,\r\n        quantityStatus: string\r\n    ) => {\r\n        setCurrentColor({ name: color, hex: id, quantityStatus });\r\n        setIsColorChosen(true);\r\n        setCurrentIndexColor(index);\r\n\r\n        if (cardSliderRef?.current) {\r\n            cardSliderRef.current.slideTo(index);\r\n        }\r\n        setLoading('idle');\r\n        async function fetchData() {\r\n            try {\r\n                setImageSrc('');\r\n                setLoading('pending');\r\n\r\n                const response = await fetch(`${API_BASE}image/product-color`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        productSkuCode: skuCode,\r\n                        colorHex: id,\r\n                    }),\r\n                    headers: {\r\n                        'Content-type': 'application/json; charset=UTF-8',\r\n                    },\r\n                });\r\n\r\n                const result: ImageSrc = await response.json();\r\n\r\n                if (!response.ok) throw new Error('something went wrong');\r\n\r\n                setImageSrc(result.imagePath);\r\n                setError(null);\r\n                setLoading('succeeded');\r\n            } catch (errors) {\r\n                setError(errors);\r\n                setLoading('failed');\r\n                setImageSrc(imageNotFound);\r\n            }\r\n        }\r\n        if (\r\n            error === null &&\r\n            imagesData &&\r\n            Object.keys(imagesData).length < colorDtoSort.length\r\n        )\r\n            fetchData();\r\n    };\r\n\r\n    const renderedImage = (name: string, index: number) => {\r\n        let result: JSX.Element = (\r\n            <LazyLoad height={350}>\r\n                <img\r\n                    className=\"product-card__image\"\r\n                    src={imagesData[index]?.imageSrc || ''}\r\n                    loading=\"lazy\"\r\n                    width={304}\r\n                    height={350}\r\n                    alt={name}\r\n                />\r\n            </LazyLoad>\r\n        );\r\n        if (loading === 'pending') {\r\n            result = <Loader />;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const handleLinkClick = (e: MouseEvent<HTMLAnchorElement>) => {\r\n        e.preventDefault();\r\n        localStorage.setItem('productSkuCode', skuCode);\r\n        localStorage.setItem(\r\n            'currentColor',\r\n            JSON.stringify({\r\n                hex: currentColor.hex,\r\n                colorName: currentColor.name,\r\n                colorStatus: '',\r\n            })\r\n        );\r\n        dispatch(updateProductSku(skuCode));\r\n        dispatch(\r\n            updateProductColor({\r\n                name: currentColor.name,\r\n                id: currentColor.hex,\r\n                quantityStatus: '',\r\n            })\r\n        );\r\n        setIsLinkClicked(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <NavLink\r\n                className=\"product-card__slider-link\"\r\n                to={`/product/${skuCode}${currentColor.hex}`}\r\n                onClick={handleLinkClick}\r\n            >\r\n                <Swiper\r\n                    className=\"product-card__slider\"\r\n                    slidesPerView={1}\r\n                    allowTouchMove={false}\r\n                    onSwiper={(swiper) => {\r\n                        cardSliderRef.current = swiper as TSwiper;\r\n                    }}\r\n                    onSlideChange={(swiper) => {\r\n                        colorDtoSort.forEach((item, index) => {\r\n                            if (swiper.activeIndex === index) {\r\n                                const { name, id, quantityStatus } = item;\r\n                                setCurrentColor({\r\n                                    name,\r\n                                    hex: id,\r\n                                    quantityStatus,\r\n                                });\r\n                            }\r\n                        });\r\n                        setIsColorChosen(true);\r\n                    }}\r\n                >\r\n                    {loading === 'pending' ? (\r\n                        <SwiperSlide>\r\n                            <div className=\"product-card__image-wrapper\">\r\n                                <Loader />\r\n                            </div>\r\n                        </SwiperSlide>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    {colorDtoSort.length === 0 && (\r\n                        <SwiperSlide>\r\n                            <div className=\"product-card__image-wrapper\">\r\n                                <img\r\n                                    className=\"product-card__image\"\r\n                                    src={imageNotFound}\r\n                                    alt={name}\r\n                                />\r\n                            </div>\r\n                        </SwiperSlide>\r\n                    )}\r\n                    {colorDtoSort.map((color, index) => {\r\n                        return (\r\n                            <SwiperSlide\r\n                                key={`slider-image-${skuCode}${color.id}`}\r\n                            >\r\n                                <div className=\"product-card__image-wrapper\">\r\n                                    {renderedImage(name, index)}\r\n                                </div>\r\n                            </SwiperSlide>\r\n                        );\r\n                    })}\r\n                </Swiper>\r\n            </NavLink>\r\n            <div className=\"product-card__content swiper-no-swiping\">\r\n                <div className=\"product-card__content-top\">\r\n                    <h2 className=\"product-card__title\">\r\n                        <NavLink\r\n                            className=\"product-card__title-link\"\r\n                            to={`/product/${skuCode}${currentColor.hex}`}\r\n                            onClick={handleLinkClick}\r\n                        >\r\n                            {name}\r\n                        </NavLink>\r\n                    </h2>\r\n                    <fieldset className=\"product-card__color-checkboxes\">\r\n                        {colorDtoSort.map((color, index) => {\r\n                            const { name, id, quantityStatus } = color;\r\n                            return (\r\n                                <label\r\n                                    className=\"product-card__checkbox-label\"\r\n                                    key={nextId('color-radio')}\r\n                                >\r\n                                    <input\r\n                                        className=\"product-card__color-checkbox\"\r\n                                        type=\"radio\"\r\n                                        name={uniqIdForInputName}\r\n                                        aria-label={name}\r\n                                        value={id}\r\n                                        checked={\r\n                                            currentColor.name === name ||\r\n                                            (!isColorChosen && index === 0)\r\n                                        }\r\n                                        onChange={() =>\r\n                                            handleSlideChange(\r\n                                                name,\r\n                                                index,\r\n                                                id,\r\n                                                quantityStatus\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                    <span\r\n                                        className={`product-card__checked-checkbox ${\r\n                                            quantityStatus ===\r\n                                            'Немає в наявності'\r\n                                                ? 'product-card__checked-checkbox_not-available'\r\n                                                : ''\r\n                                        }`}\r\n                                        style={{ backgroundColor: `${id}` }}\r\n                                    />\r\n                                </label>\r\n                            );\r\n                        })}\r\n                    </fieldset>\r\n                </div>\r\n                <p className=\"product-card__description\">{shortDescription}</p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(SliderImages);\r\n"],"names":["AddToFavoriteBtn","props","productSkuCode","isFavorite","reference","isAddedToFavorite","setIsAddedToFavorite","useState","isClicked","setIsClicked","loading","useAppSelector","state","userActions","loadingAddToFavorite","error","errorAddToFavorite","dispatch","useAppDispatch","useEffect","resetFavoriteStatus","current","style","cssText","_jsx","className","concat","onClick","toggleFavoriteProduct","type","tabIndex","children","_jsxs","width","height","viewBox","xmlns","fillRule","clipRule","d","fill","memo","ProductCard","_ref","product","priceSpaced","setPriceSpaced","discountPriceSpaced","setDiscountPriceSpaced","imagesData","setImagesData","isElementAddedToCart","setIsElementAddedToCart","cartBody","cart","price","priceWithDiscount","discount","skuCode","favorite","name","currentColor","setCurrentColor","hex","quantityStatus","jwtToken","auth","favoriteBtnProductCardRef","useRef","some","item","colorHex","addSpaceToPrice","currentPrice","currentDiscountPrice","res","toLocaleString","replace","ref","SliderImages","productData","_Fragment","openPopUpNotification","href","headerSprites","disabled","addProductToCartBody","openPopUpCart","src","cartAdded","alt","sortColors","colorDtoList","JSON","parse","stringify","sort","a","b","valuesOfAvailability","compareA","indexOf","compareB","cardSliderRef","shortDescription","imageDtoList","currentIndexColor","setCurrentIndexColor","isColorChosen","setIsColorChosen","uniqIdForInputName","nextId","imageSrc","setImageSrc","setLoading","setError","isLinkClicked","setIsLinkClicked","currentSkuStore","productInformation","currentSku","currentColorStore","navigate","useNavigate","colorDtoSort","sortColorByFirstImg","color","length","id","imagePath","imageNotFound","Object","keys","prev","renderedImage","index","_imagesData$index","result","LazyLoad","Loader","handleLinkClick","e","preventDefault","localStorage","setItem","colorName","colorStatus","updateProductSku","updateProductColor","NavLink","to","Swiper","slidesPerView","allowTouchMove","onSwiper","swiper","onSlideChange","forEach","activeIndex","SwiperSlide","map","value","checked","onChange","handleSlideChange","slideTo","async","response","fetch","API_BASE","method","body","headers","json","ok","Error","errors","fetchData","backgroundColor"],"sourceRoot":""}