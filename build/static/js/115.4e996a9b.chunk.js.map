{"version":3,"file":"static/js/115.4e996a9b.chunk.js","mappings":"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","sources":["pages/UserCabinet/ListOfRoutes.ts","pages/UserCabinet/CabinetNavigation/CabinetNavigation.tsx","pages/UserCabinet/CabinetContent/UserContacts/UserContacts.tsx","pages/UserCabinet/CabinetContent/UserFavorites/UserFavorites.tsx","pages/UserCabinet/CabinetContent/UserPasswordReset/UserPasswordReset.tsx","pages/UserCabinet/CabinetNavigation/MobileNavigation/MobileNavigation.tsx","pages/UserCabinet/CabinetContent/MobileContent/MobileContent.tsx","pages/UserCabinet/CabinetContent/DesktopContent/DesktopContent.tsx","pages/UserCabinet/CabinetContent/CabinetContent.tsx","pages/UserCabinet/UserCabinet.tsx","shared-components/Breadcrumbs/Breadcrumbs.tsx","shared-components/NavigationListOfCategories/NavigationListOfCategories.tsx","assets/icons/pagination/pagination-sprites.svg","shared-components/Pagination2/Pagination2.tsx","assets/icons/userMessages/failed_icon.svg","shared-components/UserMessages/ErrorMessageSmall/ErrorMessageSmall.tsx","assets/icons/userMessages/success_icon.svg","shared-components/UserMessages/SuccessMessage/SuccessMessage.tsx","utils/moveUserToPageUp.ts"],"sourcesContent":["const listOfRoutes = [\r\n    {\r\n        title: 'Контактна інформація',\r\n        href: '/cabinet/contacts',\r\n    },\r\n    {\r\n        title: 'Список бажань',\r\n        href: '/cabinet/favorites',\r\n    },\r\n    {\r\n        title: 'Змінити пароль',\r\n        href: '/cabinet/resetpassword',\r\n    },\r\n];\r\n\r\nexport default listOfRoutes;\r\n","import { useContext, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserActiveLinkContext } from '../UserCabinet';\r\nimport listOfRoutes from '../ListOfRoutes';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\r\nimport { userLogOut } from '../../../store/reducers/authSlice';\r\nimport './CabinetNavigation.scss';\r\n\r\nconst CabinetNavigation = () => {\r\n    const { activeLink, setActiveLink } = useContext(UserActiveLinkContext);\r\n    const dispatch = useAppDispatch();\r\n    const { jwtToken } = useAppSelector((state) => state.auth);\r\n\r\n    return (\r\n        <nav className=\"cabinet-navigation\">\r\n            <ul className=\"cabinet-navigation__list\">\r\n                {listOfRoutes.map((link) => {\r\n                    const { title, href } = link;\r\n                    return (\r\n                        <li\r\n                            className=\"cabinet-navigation__item\"\r\n                            key={`${href}${title}-desktop`}\r\n                        >\r\n                            <NavLink\r\n                                className={`cabinet-navigation__link ${\r\n                                    activeLink?.href === href\r\n                                        ? 'cabinet-navigation__link-active'\r\n                                        : ''\r\n                                }`}\r\n                                to={href}\r\n                                onClick={() => setActiveLink({ title, href })}\r\n                            >\r\n                                {link.title}\r\n                            </NavLink>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <button\r\n                className=\"cabinet-navigation__close\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    dispatch(userLogOut(jwtToken));\r\n                }}\r\n            >\r\n                Вихід\r\n            </button>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default memo(CabinetNavigation);\r\n","import { useEffect, memo, useState } from 'react';\r\nimport { useFormik, FormikErrors } from 'formik';\r\nimport {\r\n    FirstNameInput,\r\n    LastNameInput,\r\n    EmailInput,\r\n    PhoneNumberInput,\r\n    PasswordInput,\r\n    BirthDateInput,\r\n} from '../../../../shared-components/FormComponents/Inputs';\r\nimport {\r\n    updateUserProfileData,\r\n    resetUserProfileDataStatus,\r\n} from '../../../../store/reducers/userActionsSlice';\r\nimport formValidation from '../../../../utils/formValidation';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\r\nimport Loader from '../../../../shared-components/Loader';\r\nimport {\r\n    ErrorMessageSmall,\r\n    SuccessMessage,\r\n} from '../../../../shared-components/UserMessages/UserMessages';\r\nimport './UserContacts.scss';\r\n\r\ninterface FormValues {\r\n    [key: string]: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    birthdate: string;\r\n    phoneNumber: string;\r\n    password: string;\r\n    oldpassword: string;\r\n    repeatedPassword: string;\r\n    email: string;\r\n}\r\n\r\nconst UserContacts = () => {\r\n    const dispatch = useAppDispatch();\r\n    const [isFormSubmitted, setIsFormSubmitted] = useState(false);\r\n    const { loadingUserPersonalInfo, errorUserPersonalInfo, userProfileData } =\r\n        useAppSelector((state) => state.userActions);\r\n\r\n    useEffect(() => {\r\n        dispatch(resetUserProfileDataStatus());\r\n    }, []);\r\n\r\n    const formik11 = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            birthdate: '',\r\n            phoneNumber: '',\r\n            oldpassword: '',\r\n            password: '',\r\n            repeatedPassword: '',\r\n            email: '',\r\n            ...userProfileData,\r\n        },\r\n        validate: (values: FormValues) => {\r\n            const errors: FormikErrors<FormValues> = {};\r\n            const validationFields = [\r\n                'firstName',\r\n                'lastName',\r\n                'birthdate',\r\n                'email',\r\n                'phoneNumber',\r\n                'oldpassword',\r\n                'password',\r\n            ];\r\n            validationFields.forEach((fieldName: string) => {\r\n                let error;\r\n                if (fieldName === 'password' || fieldName === 'oldpassword') {\r\n                    error = formValidation(fieldName, values[fieldName], false);\r\n                } else {\r\n                    error = formValidation(fieldName, values[fieldName]);\r\n                }\r\n\r\n                if (error) {\r\n                    errors[fieldName] = error;\r\n                }\r\n            });\r\n\r\n            if (values.password && formik11.touched.repeatedPassword) {\r\n                if (!values.repeatedPassword) {\r\n                    errors.repeatedPassword = 'Необхідно заповнити дане поле';\r\n                } else if (values.repeatedPassword !== values.password) {\r\n                    errors.repeatedPassword = 'Паролі мають співпадати';\r\n                }\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            const {\r\n                firstName,\r\n                lastName,\r\n                birthdate,\r\n                phoneNumber,\r\n                oldpassword,\r\n                password,\r\n                email,\r\n                repeatedPassword,\r\n            } = values;\r\n            setIsFormSubmitted(true);\r\n            dispatch(\r\n                updateUserProfileData({\r\n                    email,\r\n                    oldPassword: oldpassword,\r\n                    newPassword: password,\r\n                    repeatedNewPassword: repeatedPassword,\r\n                    birthday: birthdate,\r\n                    firstName,\r\n                    lastName,\r\n                    phoneNumber,\r\n                })\r\n            );\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!userProfileData) return;\r\n        formik11.setValues((prev) => {\r\n            return {\r\n                ...prev,\r\n                ...userProfileData,\r\n            };\r\n        });\r\n    }, [userProfileData]);\r\n\r\n    return (\r\n        <div className=\"user-contacts\">\r\n            <h1 className=\"user-contacts__title\">Контактна інформація</h1>\r\n            <form\r\n                className=\"user-contacts__form\"\r\n                onSubmit={formik11.handleSubmit}\r\n                noValidate\r\n            >\r\n                <div className=\"user-contacts__form-wrapper\">\r\n                    {loadingUserPersonalInfo === 'pending' ? (\r\n                        <Loader className=\"user-contacts__loader\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    <div className=\"user-contacts__form-left user-contacts__form-wrapper_start\">\r\n                        <FirstNameInput formik={formik11} />\r\n                        <LastNameInput formik={formik11} />\r\n                        <BirthDateInput formik={formik11} />\r\n                        <EmailInput formik={formik11} />\r\n                        <PhoneNumberInput formik={formik11} />\r\n                    </div>\r\n                    <button\r\n                        className=\"user-contacts__form-submit\"\r\n                        type=\"submit\"\r\n                        disabled={loadingUserPersonalInfo === 'pending'}\r\n                    >\r\n                        Зберегти\r\n                    </button>\r\n                    {loadingUserPersonalInfo === 'succeeded' &&\r\n                    isFormSubmitted ? (\r\n                        <SuccessMessage text=\"Дані успішно збережені!\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    {errorUserPersonalInfo ? (\r\n                        <ErrorMessageSmall text=\"Щось пішло не так, спробуйте зберегти дані ще раз\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(UserContacts);\r\n","import { useContext, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport NavigationListOfCategories from '../../../../shared-components/NavigationListOfCategories/NavigationListOfCategories';\r\nimport ProductCard from '../../../../shared-components/ProductCard/ProductCard';\r\nimport Pagination2 from '../../../../shared-components/Pagination2/Pagination2';\r\nimport { useAppSelector } from '../../../../hooks/hooks';\r\nimport Loader from '../../../../shared-components/Loader';\r\nimport type { ProductCardType } from '../../../../types/types';\r\nimport { FavoritesContext } from '../CabinetContent';\r\n\r\nimport './UserFavorites.scss';\r\n\r\nconst UserFavorites = () => {\r\n    const {\r\n        currentPage,\r\n        setCurrentPage,\r\n        activeCategory,\r\n        setActiveCategory,\r\n        setIsPaginationInit,\r\n    } = useContext(FavoritesContext);\r\n\r\n    const userFavorites = useAppSelector(\r\n        (state) => state.userActions.userFavorites\r\n    );\r\n    const loadingUserFavorites = useAppSelector(\r\n        (state) => state.userActions.loadingUserFavorites\r\n    );\r\n    const categories = useAppSelector(\r\n        (state) => state.userActions.userFavoritsCategories\r\n    );\r\n\r\n    return (\r\n        <div className=\"user-favorites\">\r\n            <h1 className=\"user-favorites__title\">Список бажань</h1>\r\n            {userFavorites?.products.length === 0 &&\r\n            loadingUserFavorites === 'succeeded' ? (\r\n                <div className=\"user-favorites__empty-block\">\r\n                    <h2>Ви ще нічого не додали.</h2>\r\n                    <p>\r\n                        Ознайомтеся з нашим{' '}\r\n                        <NavLink to=\"/catalog\">каталогом</NavLink> і додайте\r\n                        товар, який сподобався.\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    {' '}\r\n                    <NavigationListOfCategories\r\n                        categories={categories}\r\n                        activeCategory={activeCategory}\r\n                        setActiveCategory={setActiveCategory}\r\n                    />\r\n                    <ul className=\"user-favorites__products\">\r\n                        {loadingUserFavorites !== 'succeeded' ? (\r\n                            <Loader />\r\n                        ) : (\r\n                            userFavorites?.products.map(\r\n                                (product: ProductCardType) => {\r\n                                    return (\r\n                                        <li\r\n                                            className=\"user-favorites__item\"\r\n                                            key={product.skuCode}\r\n                                        >\r\n                                            <ProductCard product={product} />\r\n                                        </li>\r\n                                    );\r\n                                }\r\n                            )\r\n                        )}\r\n                    </ul>\r\n                </>\r\n            )}\r\n            <div className=\"user-favorites__pagination-wrapper\">\r\n                <Pagination2\r\n                    countOfPages={userFavorites?.countOfPages}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    setIsPaginationInit={setIsPaginationInit}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(UserFavorites);\r\n","import { useEffect, memo } from 'react';\r\nimport { useFormik, FormikErrors } from 'formik';\r\nimport { PasswordInput } from '../../../../shared-components/FormComponents/Inputs';\r\nimport {\r\n    updatetUserProfilePassword,\r\n    resetUpdatePasswordStatus,\r\n} from '../../../../store/reducers/userActionsSlice';\r\nimport formValidation from '../../../../utils/formValidation';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\r\nimport Loader from '../../../../shared-components/Loader';\r\nimport {\r\n    ErrorMessageSmall,\r\n    SuccessMessage,\r\n} from '../../../../shared-components/UserMessages/UserMessages';\r\nimport './UserPasswordReset.scss';\r\n\r\ninterface FormValues {\r\n    [key: string]: string;\r\n    password: string;\r\n    oldpassword: string;\r\n    repeatedPassword: string;\r\n}\r\n\r\nconst UserPasswordReset = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { updatePasswordStatus, errorUpdatePassword } = useAppSelector(\r\n        (state) => state.userActions\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(resetUpdatePasswordStatus());\r\n    }, []);\r\n\r\n    const formik12 = useFormik({\r\n        initialValues: {\r\n            oldpassword: '',\r\n            password: '',\r\n            repeatedPassword: '',\r\n        },\r\n        validate: (values: FormValues) => {\r\n            const errors: FormikErrors<FormValues> = {};\r\n            const validationFields = ['oldpassword', 'password'];\r\n            validationFields.forEach((fieldName: string) => {\r\n                let error;\r\n                if (fieldName === 'password' || fieldName === 'oldpassword') {\r\n                    error = formValidation(fieldName, values[fieldName], false);\r\n                } else {\r\n                    error = formValidation(fieldName, values[fieldName]);\r\n                }\r\n\r\n                if (error) {\r\n                    errors[fieldName] = error;\r\n                }\r\n            });\r\n\r\n            if (values.password && formik12.touched.repeatedPassword) {\r\n                if (!values.repeatedPassword) {\r\n                    errors.repeatedPassword = 'Необхідно заповнити дане поле';\r\n                } else if (values.repeatedPassword !== values.password) {\r\n                    errors.repeatedPassword = 'Паролі мають співпадати';\r\n                }\r\n\r\n                if (values.oldpassword === values.password) {\r\n                    errors.password =\r\n                        'Старий та новий паролі мають відрізнятись';\r\n                    errors.oldpassword =\r\n                        'Старий та новий паролі мають відрізнятись';\r\n                }\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            const { oldpassword, password, repeatedPassword } = values;\r\n            if (!oldpassword || !password || !repeatedPassword) {\r\n                formik12.setErrors({\r\n                    oldpassword: oldpassword\r\n                        ? ''\r\n                        : 'Необхідно заповнити дане поле',\r\n                    password: password ? '' : 'Необхідно заповнити дане поле',\r\n                    repeatedPassword: repeatedPassword\r\n                        ? ''\r\n                        : 'Необхідно заповнити дане поле',\r\n                });\r\n                return;\r\n            }\r\n            dispatch(\r\n                updatetUserProfilePassword({\r\n                    oldPassword: oldpassword,\r\n                    newPassword: password,\r\n                    repeatedNewPassword: repeatedPassword,\r\n                })\r\n            );\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className=\"user-contacts\">\r\n            <h1 className=\"user-contacts__title\">Змінити пароль</h1>\r\n            <form\r\n                className=\"user-contacts__form\"\r\n                onSubmit={formik12.handleSubmit}\r\n                noValidate\r\n            >\r\n                <div className=\"user-contacts__form-wrapper\">\r\n                    {updatePasswordStatus === 'pending' ? (\r\n                        <Loader className=\"user-contacts__loader\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    <div className=\"user-contacts__form-left\">\r\n                        <input\r\n                            hidden\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            defaultValue=\"\"\r\n                            autoComplete=\"username\"\r\n                            style={{ display: 'none' }}\r\n                        />\r\n                        <PasswordInput\r\n                            formik={formik12}\r\n                            label=\"Старий пароль\"\r\n                            name=\"oldpassword\"\r\n                            isRequired={false}\r\n                        />\r\n                        <PasswordInput\r\n                            formik={formik12}\r\n                            label=\"Новий пароль\"\r\n                            isRequired={false}\r\n                        />\r\n                        <PasswordInput\r\n                            formik={formik12}\r\n                            label=\"Повторіть пароль*\"\r\n                            name=\"repeatedPassword\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        className=\"user-contacts__form-submit\"\r\n                        type=\"submit\"\r\n                        disabled={updatePasswordStatus === 'pending'}\r\n                    >\r\n                        Зберегти\r\n                    </button>\r\n                    {updatePasswordStatus === 'succeeded' ? (\r\n                        <SuccessMessage text=\"Пароль успішно змінено\" />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    {errorUpdatePassword ? (\r\n                        <ErrorMessageSmall\r\n                            text={errorUpdatePassword as string}\r\n                        />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(UserPasswordReset);\r\n","import { useContext, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserActiveLinkContext } from '../../UserCabinet';\r\nimport listOfRoutes from '../../ListOfRoutes';\r\nimport { renderUserCabinetContent } from '../../CabinetContent/CabinetContent';\r\nimport { userLogOut } from '../../../../store/reducers/authSlice';\r\nimport { useAppSelector, useAppDispatch } from '../../../../hooks/hooks';\r\nimport './MobileNavigation.scss';\r\n\r\nconst MobileNavigation = () => {\r\n    const { activeLink, setActiveLink } = useContext(UserActiveLinkContext);\r\n    const dispatch = useAppDispatch();\r\n    const { jwtToken } = useAppSelector((state) => state.auth);\r\n\r\n    return (\r\n        <nav className=\"nav-mobile\">\r\n            <ul className=\"nav-mobile__list\">\r\n                {listOfRoutes.map((link) => {\r\n                    const { href, title } = link;\r\n                    return (\r\n                        <li\r\n                            className=\"nav-mobile__item\"\r\n                            key={`${href}${title}-mobile`}\r\n                        >\r\n                            <NavLink\r\n                                className={`nav-mobile__link ${\r\n                                    activeLink?.href === href\r\n                                        ? 'nav-mobile__link-active'\r\n                                        : ''\r\n                                }`}\r\n                                to={href}\r\n                                onClick={() => {\r\n                                    setActiveLink((prev) => {\r\n                                        if (!prev || prev.href !== href) {\r\n                                            return {\r\n                                                title,\r\n                                                href,\r\n                                            };\r\n                                        }\r\n                                        return {\r\n                                            title: '',\r\n                                            href: '',\r\n                                        };\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {title}\r\n                                <span className=\"nav-mobile__link-decorative\">\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        width=\"20\"\r\n                                        height=\"20\"\r\n                                        viewBox=\"0 0 20 20\"\r\n                                    >\r\n                                        <path d=\"M10.1165 13.5094C10.2722 13.487 10.4166 13.416 10.5297 13.3068L16.7647 7.32117C16.9222 7.18826 17.0178 6.9962 17.0291 6.79058C17.0405 6.58477 16.9665 6.38349 16.8246 6.23406C16.6828 6.08462 16.4855 6.00042 16.2795 6.00111C16.0734 6.00181 15.8768 6.0874 15.7359 6.23788L10.0153 11.7327L4.29467 6.23788C4.15375 6.0874 3.95717 6.00181 3.75102 6.00111C3.54504 6.00042 3.34776 6.08462 3.20599 6.23406C3.06403 6.3835 2.9901 6.58478 3.0014 6.79058C3.01271 6.99621 3.10839 7.18827 3.26583 7.32117L9.50083 13.3068C9.66471 13.4642 9.89121 13.5388 10.1165 13.5093L10.1165 13.5094Z\" />\r\n                                    </svg>\r\n                                </span>\r\n                            </NavLink>\r\n                            {href === activeLink?.href\r\n                                ? renderUserCabinetContent(activeLink)\r\n                                : ''}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <button\r\n                className=\"nav-mobile__close\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    dispatch(userLogOut(jwtToken));\r\n                }}\r\n            >\r\n                Вихід\r\n            </button>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default memo(MobileNavigation);\r\n","import { memo } from 'react';\r\nimport MobileNavigation from '../../CabinetNavigation/MobileNavigation/MobileNavigation';\r\n\r\nconst MobileContent = () => {\r\n    return <MobileNavigation />;\r\n};\r\n\r\nexport default memo(MobileContent);\r\n","import { useContext, memo } from 'react';\r\nimport { renderUserCabinetContent } from '../CabinetContent';\r\nimport { UserActiveLinkContext } from '../../UserCabinet';\r\n\r\nconst DesktopContent = () => {\r\n    const { activeLink } = useContext(UserActiveLinkContext);\r\n    return <>{renderUserCabinetContent(activeLink)}</>;\r\n};\r\n\r\nexport default memo(DesktopContent);\r\n","import {\r\n    ReactNode,\r\n    useEffect,\r\n    useState,\r\n    useContext,\r\n    createContext,\r\n    useMemo,\r\n    useCallback,\r\n    SetStateAction,\r\n    Dispatch,\r\n    memo,\r\n} from 'react';\r\nimport { useLocation, useNavigate } from 'react-router';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\r\nimport {\r\n    getUserProfileData,\r\n    getUserFavorites,\r\n    getUserFavoritCategories,\r\n    getUserFavoritByCategory,\r\n    resetFavoriteStatus,\r\n} from '../../../store/reducers/userActionsSlice';\r\nimport UserContacts from './UserContacts/UserContacts';\r\nimport UserFavorites from './UserFavorites/UserFavorites';\r\nimport UserPasswordReset from './UserPasswordReset/UserPasswordReset';\r\nimport MobileContent from './MobileContent/MobileContent';\r\nimport { LinkType, UserActiveLinkContext } from '../UserCabinet';\r\nimport listOfRoutes from '../ListOfRoutes';\r\nimport DesktopContent from './DesktopContent/DesktopContent';\r\nimport type { NavigationCategory } from '../../../types/types';\r\nimport './CabinetContent.scss';\r\n\r\ntype FavoriteCurrentPage = {\r\n    currentPage: number;\r\n    setCurrentPage: Dispatch<SetStateAction<number>>;\r\n    activeCategory: NavigationCategory;\r\n    setActiveCategory: Dispatch<SetStateAction<NavigationCategory>>;\r\n    isPaginationInit: boolean;\r\n    setIsPaginationInit: Dispatch<SetStateAction<boolean>>;\r\n};\r\n\r\nexport const FavoritesContext = createContext<FavoriteCurrentPage>({\r\n    currentPage: 0,\r\n    setCurrentPage: () => {},\r\n    activeCategory: {\r\n        name: 'Всі товари',\r\n        id: '',\r\n    },\r\n    setActiveCategory: () => {},\r\n    isPaginationInit: true,\r\n    setIsPaginationInit: () => {},\r\n});\r\n\r\nexport const renderUserCabinetContent = (activeLink: LinkType | null) => {\r\n    let res: '' | ReactNode = '';\r\n    switch (activeLink?.href) {\r\n        case listOfRoutes[0].href:\r\n            res = <UserContacts />;\r\n            break;\r\n        case listOfRoutes[1].href:\r\n            res = <UserFavorites />;\r\n            break;\r\n        case listOfRoutes[2].href:\r\n            res = <UserPasswordReset />;\r\n            break;\r\n        default:\r\n            res = '';\r\n    }\r\n    return res;\r\n};\r\n\r\nconst CabinetContent = () => {\r\n    const PAGE_PAGINATION_SIZE = 6;\r\n    const [currentScreenSize, setCurrentScreenSize] = useState<\r\n        'desktop' | 'mobile' | null\r\n    >(null);\r\n    const { activeLink, setActiveLink } = useContext(UserActiveLinkContext);\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [isPaginationInit, setIsPaginationInit] = useState(true);\r\n    const [activeCategory, setActiveCategory] = useState<NavigationCategory>({\r\n        name: 'Всі товари',\r\n        id: '',\r\n    });\r\n    const { jwtToken } = useAppSelector((state) => state.auth);\r\n    const userFavorites = useAppSelector(\r\n        (state) => state.userActions.userFavorites\r\n    );\r\n    const loadingAddToFavorite = useAppSelector(\r\n        (state) => state.userActions.loadingAddToFavorite\r\n    );\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserProfileData());\r\n        dispatch(getUserFavoritCategories());\r\n        return () => {\r\n            dispatch(resetFavoriteStatus());\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isPaginationInit) return;\r\n        if (activeCategory.id) {\r\n            dispatch(\r\n                getUserFavoritByCategory({\r\n                    id: activeCategory.id,\r\n                    size: PAGE_PAGINATION_SIZE,\r\n                    page: currentPage,\r\n                })\r\n            );\r\n        } else {\r\n            dispatch(\r\n                getUserFavorites({\r\n                    page: currentPage,\r\n                    size: PAGE_PAGINATION_SIZE,\r\n                })\r\n            );\r\n        }\r\n    }, [currentPage, isPaginationInit]);\r\n\r\n    useEffect(() => {\r\n        if (!activeCategory.id) {\r\n            dispatch(\r\n                getUserFavorites({\r\n                    page: currentPage,\r\n                    size: PAGE_PAGINATION_SIZE,\r\n                })\r\n            );\r\n            return;\r\n        }\r\n        setCurrentPage(0);\r\n        dispatch(\r\n            getUserFavoritByCategory({\r\n                id: activeCategory.id,\r\n                size: PAGE_PAGINATION_SIZE,\r\n            })\r\n        );\r\n    }, [activeCategory.id]);\r\n\r\n    useEffect(() => {\r\n        if (!userFavorites) return;\r\n        if (loadingAddToFavorite !== 'succeeded') return;\r\n        dispatch(getUserFavoritCategories());\r\n\r\n        if (userFavorites.products.length === 1) {\r\n            if (currentPage !== 0) {\r\n                setCurrentPage(currentPage - 1);\r\n                return;\r\n            }\r\n            if (activeCategory.id) {\r\n                setActiveCategory({\r\n                    name: 'Всі товари',\r\n                    id: '',\r\n                });\r\n                return;\r\n            }\r\n            // dispatch(\r\n            //     getUserFavorites({\r\n            //         page: currentPage,\r\n            //         size: 6,\r\n            //     })\r\n            // );\r\n        }\r\n\r\n        if (activeCategory.id) {\r\n            dispatch(\r\n                getUserFavoritByCategory({\r\n                    id: activeCategory.id,\r\n                    size: PAGE_PAGINATION_SIZE,\r\n                    page: currentPage,\r\n                })\r\n            );\r\n        } else {\r\n            dispatch(\r\n                getUserFavorites({\r\n                    page: currentPage,\r\n                    size: PAGE_PAGINATION_SIZE,\r\n                })\r\n            );\r\n        }\r\n    }, [loadingAddToFavorite]);\r\n\r\n    const checkSize = useCallback(() => {\r\n        const screenWidth = window.screen.width;\r\n        if (screenWidth <= 961) {\r\n            setCurrentScreenSize('mobile');\r\n        } else {\r\n            setCurrentScreenSize('desktop');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (window.screen.width <= 961) {\r\n            setCurrentScreenSize('mobile');\r\n        } else {\r\n            setCurrentScreenSize('desktop');\r\n        }\r\n\r\n        window.addEventListener('resize', checkSize);\r\n\r\n        return () => window.removeEventListener('resize', checkSize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            currentScreenSize === 'desktop' &&\r\n            pathname === '/cabinet' &&\r\n            (activeLink?.href === '' || !activeLink)\r\n        ) {\r\n            setActiveLink({\r\n                title: listOfRoutes[0].title,\r\n                href: listOfRoutes[0].href,\r\n            });\r\n        }\r\n    }, [currentScreenSize, activeLink, pathname]);\r\n\r\n    useEffect(() => {\r\n        if (!activeLink) return;\r\n        if (!jwtToken) return;\r\n        if (activeLink.href === '' && currentScreenSize === 'mobile') {\r\n            navigate('/cabinet');\r\n        } else {\r\n            navigate(`${activeLink.href}`);\r\n        }\r\n    }, [activeLink, currentScreenSize]);\r\n\r\n    useEffect(() => {\r\n        listOfRoutes.forEach((route) => {\r\n            if (pathname === route.href && activeLink?.href !== route.href) {\r\n                setActiveLink({\r\n                    title: route.title,\r\n                    href: route.href,\r\n                });\r\n            }\r\n        });\r\n    }, [pathname]);\r\n\r\n    return (\r\n        <div className=\"cabinet-content\">\r\n            <FavoritesContext.Provider\r\n                value={useMemo(\r\n                    () => ({\r\n                        currentPage,\r\n                        setCurrentPage,\r\n                        activeCategory,\r\n                        setActiveCategory,\r\n                        setIsPaginationInit,\r\n                        isPaginationInit,\r\n                    }),\r\n                    [currentPage, activeCategory, isPaginationInit]\r\n                )}\r\n            >\r\n                {currentScreenSize === 'desktop' ? (\r\n                    <DesktopContent />\r\n                ) : (\r\n                    <MobileContent />\r\n                )}\r\n            </FavoritesContext.Provider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(CabinetContent);\r\n","import {\r\n    useState,\r\n    createContext,\r\n    Dispatch,\r\n    SetStateAction,\r\n    useMemo,\r\n    memo,\r\n} from 'react';\r\nimport Breadcrumbs from '../../shared-components/Breadcrumbs/Breadcrumbs';\r\nimport CabinetNavigation from './CabinetNavigation/CabinetNavigation';\r\nimport CabinetContent from './CabinetContent/CabinetContent';\r\nimport './UserCabinet.scss';\r\n\r\nexport type LinkType = {\r\n    title: string;\r\n    href: string;\r\n};\r\n\r\ntype ActiveLinkContextType = {\r\n    activeLink: LinkType | null;\r\n    setActiveLink: Dispatch<SetStateAction<LinkType | null>>;\r\n};\r\n\r\nexport const UserActiveLinkContext = createContext<ActiveLinkContextType>({\r\n    activeLink: null,\r\n    setActiveLink: () => {},\r\n});\r\n\r\nconst UserCabinet = () => {\r\n    const [activeLink, setActiveLink] = useState<LinkType | null>(null);\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumbs />\r\n            <section className=\"cabinet\">\r\n                <div className=\"container\">\r\n                    <div className=\"cabinet__wrapper\">\r\n                        <UserActiveLinkContext.Provider\r\n                            value={useMemo(\r\n                                () => ({ activeLink, setActiveLink }),\r\n                                [activeLink]\r\n                            )}\r\n                        >\r\n                            <CabinetNavigation />\r\n                            <CabinetContent />\r\n                        </UserActiveLinkContext.Provider>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(UserCabinet);\r\n","import { useLocation } from 'react-router';\r\nimport './Breadcrumbs.scss';\r\nimport { NavLink } from 'react-router-dom';\r\nimport nextId from 'react-id-generator';\r\n\r\nconst Breadcrumbs = () => {\r\n    const location = useLocation();\r\n\r\n    const pathMapping: { [key: string]: string } = {\r\n        catalog: 'Каталог',\r\n        product: 'Товар',\r\n        cart: 'Кошик',\r\n        checkout: 'Оформлення замовлення',\r\n        success: 'Успішно',\r\n        cabinet: 'Особистий кабінет',\r\n        delivery: 'Доставка і оплата',\r\n        about: 'Про нас',\r\n    };\r\n\r\n    const pathSegments = location.pathname\r\n        .split('/')\r\n        .filter((crumb) => crumb !== '');\r\n\r\n    let currentLink = '';\r\n\r\n    const crumbs = pathSegments.map((crumb) => {\r\n        const decodedCrumb = decodeURIComponent(crumb);\r\n        currentLink += `/${decodedCrumb}`;\r\n\r\n        return (\r\n            <li className=\"breadcrumbs__list_item\" key={crumb}>\r\n                <NavLink\r\n                    to={currentLink}\r\n                    className=\"breadcrumbs__list_item_link\"\r\n                >\r\n                    {pathMapping[crumb] || decodedCrumb}\r\n                </NavLink>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    if (crumbs.length > 0) {\r\n        crumbs.unshift(\r\n            <li className=\"breadcrumbs__list_item\" key={nextId('crumb-item')}>\r\n                <NavLink to=\"/\" className=\"breadcrumbs__list_item_link\">\r\n                    Головна\r\n                </NavLink>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav className=\"breadcrumbs\">\r\n                <ol className=\"breadcrumbs__list\">{crumbs}</ol>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import React, { Dispatch, SetStateAction } from 'react';\r\nimport nextId from 'react-id-generator';\r\nimport { ProductCategory } from '../../pages/MainPage/components/PopularItems/types';\r\nimport { NavigationCategory } from '../../types/types';\r\nimport './NavigationListOfCategories.scss';\r\n\r\nconst NavigationListOfCategories = ({\r\n    categories,\r\n    activeCategory,\r\n    setActiveCategory,\r\n    setIsCategoryClicked,\r\n}: {\r\n    categories: ProductCategory[];\r\n    activeCategory: NavigationCategory;\r\n    setActiveCategory: Dispatch<SetStateAction<NavigationCategory>>;\r\n    setIsCategoryClicked?: Dispatch<SetStateAction<boolean>> | null;\r\n}) => {\r\n    const handleChangeTab = (\r\n        e: React.MouseEvent<HTMLButtonElement>,\r\n        id: string\r\n    ) => {\r\n        const currentCategory = e.currentTarget.getAttribute('data-value');\r\n        if (!currentCategory || id === activeCategory.id) return;\r\n        if (setIsCategoryClicked) {\r\n            setIsCategoryClicked(true);\r\n        }\r\n        setActiveCategory({\r\n            name: currentCategory,\r\n            id,\r\n        });\r\n    };\r\n\r\n    const renderedCategories = () => {\r\n        const renderResult: ProductCategory[] = [\r\n            { id: '', name: 'Всі товари' },\r\n        ];\r\n        if (Object.keys(categories).length !== 0) {\r\n            renderResult.push(...categories);\r\n        }\r\n        return renderResult;\r\n    };\r\n    return (\r\n        <nav className=\"categories-nav\">\r\n            <ul className=\"categories-nav__list\">\r\n                {renderedCategories().map((category) => {\r\n                    const { name, id } = category;\r\n                    return (\r\n                        <li\r\n                            key={nextId('category-nav')}\r\n                            className=\"categories-nav__item\"\r\n                        >\r\n                            <button\r\n                                className={\r\n                                    activeCategory.name === name\r\n                                        ? 'categories-nav__btn active'\r\n                                        : 'categories-nav__btn'\r\n                                }\r\n                                type=\"button\"\r\n                                data-value={name}\r\n                                onClick={(e) => handleChangeTab(e, id)}\r\n                            >\r\n                                {name}\r\n                            </button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nNavigationListOfCategories.defaultProps = {\r\n    setIsCategoryClicked: null,\r\n};\r\n\r\nexport default NavigationListOfCategories;\r\n","var _symbol, _symbol2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPaginationSprites(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 0,\n    height: 0,\n    className: \"hidden\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _symbol || (_symbol = /*#__PURE__*/React.createElement(\"symbol\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    id: \"next\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"02.Icons/Arrow\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Line 2 (Stroke)\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M16.1753 7.19887L21.7437 11.5199C22.0854 11.785 22.0854 12.215 21.7437 12.4801L16.1753 16.8011C15.8335 17.0663 15.2795 17.0663 14.9378 16.8011C14.5961 16.536 14.5961 16.1061 14.9378 15.8409L19.0126 12.679L1 12.679L1 11.321L19.0126 11.321L14.9378 8.15909C14.5961 7.89394 14.5961 7.46403 14.9378 7.19887C15.2795 6.93371 15.8335 6.93371 16.1753 7.19887Z\"\n  })))), _symbol2 || (_symbol2 = /*#__PURE__*/React.createElement(\"symbol\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    id: \"prev\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"02.Icons/Arrow\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Line 2 (Stroke)\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.82475 16.8011L2.25628 12.4801C1.91457 12.215 1.91457 11.785 2.25628 11.5199L7.82475 7.19887C8.16646 6.93371 8.72048 6.93371 9.06218 7.19887C9.40389 7.46403 9.40389 7.89393 9.06218 8.15909L4.98744 11.321L23 11.321L23 12.679L4.98744 12.679L9.06218 15.8409C9.40389 16.1061 9.40389 16.536 9.06218 16.8011C8.72048 17.0663 8.16646 17.0663 7.82475 16.8011Z\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPaginationSprites);\nexport default __webpack_public_path__ + \"static/media/pagination-sprites.61b4164d85d13173a7ce5726e4f55b93.svg\";\nexport { ForwardRef as ReactComponent };","/* eslint-disable react/jsx-no-useless-fragment */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react';\r\nimport nextId from 'react-id-generator';\r\nimport paginationSprite from '../../assets/icons/pagination/pagination-sprites.svg';\r\nimport moveUserToPageUp from '../../utils/moveUserToPageUp';\r\nimport './Pagination2.scss';\r\n\r\nconst Pagination2 = ({\r\n    countOfPages,\r\n    currentPage,\r\n    setCurrentPage,\r\n    setIsPaginationInit,\r\n    setIsPageChosen,\r\n}: {\r\n    countOfPages: number | undefined;\r\n    currentPage: number;\r\n    setCurrentPage: Dispatch<SetStateAction<number>>;\r\n    setIsPaginationInit: Dispatch<SetStateAction<boolean>>;\r\n    setIsPageChosen?: Dispatch<SetStateAction<boolean>>;\r\n}) => {\r\n    const [pages, setPages] = useState<number[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!countOfPages) {\r\n            setPages([]);\r\n            return;\r\n        }\r\n        const temporaryPages = [];\r\n        for (let i = 1; i <= countOfPages; i += 1) {\r\n            temporaryPages.push(i);\r\n        }\r\n        setPages([...temporaryPages]);\r\n    }, [countOfPages]);\r\n\r\n    useEffect(() => {\r\n        if (pages.length === 0) {\r\n            setCurrentPage(0);\r\n            return;\r\n        }\r\n        if (pages.length - 1 < currentPage && currentPage !== 0) {\r\n            setCurrentPage(pages.length - 1);\r\n        }\r\n    }, [pages, currentPage]);\r\n\r\n    useEffect(() => {\r\n        if (pages.length === 0) return;\r\n        if (currentPage === null) return;\r\n        setCurrentPage(currentPage);\r\n        moveUserToPageUp();\r\n    }, [currentPage]);\r\n\r\n    const getDots = () => {\r\n        return (\r\n            <li className=\"pagination__item\" key={nextId('page-dots')}>\r\n                <span className=\"pagination__dots\">...</span>\r\n            </li>\r\n        );\r\n    };\r\n\r\n    const getPages = (page: number) => {\r\n        return (\r\n            <li className=\"pagination__item\" key={nextId('page-')}>\r\n                <button\r\n                    className={`pagination__page-btn ${\r\n                        currentPage === page - 1 ? 'active' : ''\r\n                    }`}\r\n                    type=\"button\"\r\n                    data-value={page}\r\n                    onClick={() => {\r\n                        setCurrentPage(page - 1);\r\n                        setIsPaginationInit(false);\r\n                    }}\r\n                >\r\n                    {page}\r\n                </button>\r\n            </li>\r\n        );\r\n    };\r\n\r\n    const inlineStyle = () => {\r\n        const styles: { [key: string]: string } = {};\r\n        if (pages.length === 0) {\r\n            styles.display = 'none';\r\n        } else {\r\n            styles.display = 'inline-block';\r\n        }\r\n        return styles;\r\n    };\r\n\r\n    const renderPagination = () => {\r\n        return pages.map((page, index) => {\r\n            if (currentPage < 3) {\r\n                if (index === 4 && pages.length > 5) {\r\n                    return getDots();\r\n                }\r\n                if (index > 4 && index < pages.length - 1) {\r\n                    return '';\r\n                }\r\n            }\r\n            if (currentPage >= 3 && currentPage < pages.length - 3) {\r\n                if (index === 1 || index === currentPage + 2) {\r\n                    return getDots();\r\n                }\r\n                if (\r\n                    (index > 0 && index < currentPage - 1) ||\r\n                    (index > currentPage + 1 && index < pages.length - 1)\r\n                ) {\r\n                    return '';\r\n                }\r\n            }\r\n            if (currentPage >= pages.length - 3 && pages.length > 5) {\r\n                if (index === 1) {\r\n                    return getDots();\r\n                }\r\n                if (index > 0 && index < pages.length - 4) {\r\n                    return '';\r\n                }\r\n            }\r\n            return getPages(page);\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            {countOfPages ? (\r\n                <div className=\"pagination\" style={{ ...inlineStyle() }}>\r\n                    <ul className=\" pagination__list\">{renderPagination()}</ul>\r\n                    <button\r\n                        className=\"pagination__prev-btn\"\r\n                        type=\"button\"\r\n                        aria-label=\"попередня сторінка\"\r\n                        onClick={() => {\r\n                            setCurrentPage(currentPage - 1);\r\n                            setIsPaginationInit(false);\r\n                        }}\r\n                        disabled={currentPage <= 0}\r\n                    >\r\n                        <svg width={24} height={24} className=\"prev-btn__icon\">\r\n                            <use href={`${paginationSprite}#prev`} />\r\n                        </svg>\r\n                    </button>\r\n                    <button\r\n                        className=\"pagination__next-btn\"\r\n                        type=\"button\"\r\n                        aria-label=\"наступна сторінка\"\r\n                        onClick={() => {\r\n                            setCurrentPage(currentPage + 1);\r\n                            setIsPaginationInit(false);\r\n                        }}\r\n                        disabled={currentPage >= pages.length - 1}\r\n                    >\r\n                        <svg width={24} height={24} className=\"next-btn__icon\">\r\n                            <use href={`${paginationSprite}#next`} />\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pagination2;\r\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgFailedIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 25,\n    height: 24,\n    viewBox: \"0 0 25 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z\",\n    stroke: \"#EB3D3D\",\n    strokeWidth: 1.5\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 12.5L11 14.5L16 9.5\",\n    stroke: \"#EB3D3D\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgFailedIcon);\nexport default __webpack_public_path__ + \"static/media/failed_icon.90b0262963badfaf68639a5de2c134fc.svg\";\nexport { ForwardRef as ReactComponent };","import failedIcon from '../../../assets/icons/userMessages/failed_icon.svg';\r\nimport './ErrorMessageSmall.scss';\r\n\r\nconst ErrorMessageSmall = ({\r\n    text,\r\n    additionalText,\r\n}: {\r\n    text: string;\r\n    additionalText?: string;\r\n}) => {\r\n    return (\r\n        <div className=\"error-message_small\">\r\n            <div className=\"error-message_small-inner\">\r\n                <img className=\"error-message__icon\" src={failedIcon} alt=\"\" />\r\n                <p className=\"error-message__text\">{text}</p>\r\n            </div>\r\n            {additionalText ? (\r\n                <p className=\"error-message__text_additional\">\r\n                    {additionalText}\r\n                </p>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMessageSmall;\r\n","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSuccessIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 22,\n    viewBox: \"0 0 22 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M11 21C16.5228 21 21 16.5228 21 11C21 5.47715 16.5228 1 11 1C5.47715 1 1 5.47715 1 11C1 16.5228 5.47715 21 11 21Z\",\n    stroke: \"#64CB13\",\n    strokeWidth: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M7.5 11.5L9.5 13.5L14.5 8.5\",\n    stroke: \"#64CB13\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSuccessIcon);\nexport default __webpack_public_path__ + \"static/media/success_icon.df18252c1db27be830794938583fba2e.svg\";\nexport { ForwardRef as ReactComponent };","import successIcon from '../../../assets/icons/userMessages/success_icon.svg';\r\nimport './SuccessMessage.scss';\r\n\r\nconst SuccessMessage = ({\r\n    text,\r\n    additionalText,\r\n}: {\r\n    text: string;\r\n    additionalText?: string;\r\n}) => {\r\n    return (\r\n        <div className=\"success-message\">\r\n            <div className=\"success-message__inner\">\r\n                <img\r\n                    className=\"success-message__icon\"\r\n                    src={successIcon}\r\n                    alt=\"\"\r\n                />\r\n                <p className=\"success-message__text\">{text}</p>\r\n            </div>\r\n            {additionalText ? (\r\n                <p className=\"success-message__text_additional\">\r\n                    {additionalText}\r\n                </p>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SuccessMessage;\r\n","const moveUserToPageUp = (selectorId = 'catalog-content', offset = -80) => {\r\n    const catalogProductsHtml = document.getElementById(selectorId);\r\n    if (!catalogProductsHtml) return;\r\n    let yOffset;\r\n    if (offset) {\r\n        yOffset = window.screen.width > 991 ? offset || -80 : -50;\r\n    } else {\r\n        yOffset = 0;\r\n    }\r\n    const y =\r\n        catalogProductsHtml.getBoundingClientRect().top +\r\n        window.pageYOffset +\r\n        yOffset;\r\n    window.scrollTo({ top: y, behavior: 'smooth' });\r\n};\r\n\r\nexport default moveUserToPageUp;\r\n"],"names":["title","href","CabinetNavigation","activeLink","setActiveLink","useContext","UserActiveLinkContext","dispatch","useAppDispatch","jwtToken","useAppSelector","state","auth","_jsxs","className","children","_jsx","listOfRoutes","map","link","NavLink","concat","to","onClick","type","userLogOut","memo","UserContacts","isFormSubmitted","setIsFormSubmitted","useState","loadingUserPersonalInfo","errorUserPersonalInfo","userProfileData","userActions","useEffect","resetUserProfileDataStatus","formik11","useFormik","initialValues","firstName","lastName","birthdate","phoneNumber","oldpassword","password","repeatedPassword","email","validate","values","errors","forEach","fieldName","error","formValidation","touched","onSubmit","updateUserProfileData","oldPassword","newPassword","repeatedNewPassword","birthday","setValues","prev","handleSubmit","noValidate","Loader","FirstNameInput","formik","LastNameInput","BirthDateInput","EmailInput","PhoneNumberInput","disabled","SuccessMessage","text","ErrorMessageSmall","UserFavorites","currentPage","setCurrentPage","activeCategory","setActiveCategory","setIsPaginationInit","FavoritesContext","userFavorites","loadingUserFavorites","categories","userFavoritsCategories","products","length","_Fragment","NavigationListOfCategories","product","ProductCard","skuCode","Pagination2","countOfPages","UserPasswordReset","updatePasswordStatus","errorUpdatePassword","resetUpdatePasswordStatus","formik12","updatetUserProfilePassword","setErrors","hidden","name","defaultValue","autoComplete","style","display","PasswordInput","label","isRequired","MobileNavigation","xmlns","width","height","viewBox","d","renderUserCabinetContent","MobileContent","DesktopContent","createContext","id","isPaginationInit","res","CabinetContent","currentScreenSize","setCurrentScreenSize","loadingAddToFavorite","navigate","useNavigate","pathname","useLocation","getUserProfileData","getUserFavoritCategories","resetFavoriteStatus","getUserFavoritByCategory","size","page","getUserFavorites","checkSize","useCallback","screenWidth","window","screen","addEventListener","removeEventListener","route","Provider","value","useMemo","UserCabinet","Breadcrumbs","location","pathMapping","catalog","cart","checkout","success","cabinet","delivery","about","pathSegments","split","filter","crumb","currentLink","crumbs","decodedCrumb","decodeURIComponent","unshift","nextId","_ref","setIsCategoryClicked","renderedCategories","renderResult","Object","keys","push","category","e","handleChangeTab","currentCategory","currentTarget","getAttribute","defaultProps","setIsPageChosen","pages","setPages","temporaryPages","i","moveUserToPageUp","getDots","inlineStyle","styles","index","getPages","paginationSprite","additionalText","src","failedIcon","alt","successIcon","selectorId","arguments","undefined","offset","catalogProductsHtml","document","getElementById","yOffset","y","getBoundingClientRect","top","pageYOffset","scrollTo","behavior"],"sourceRoot":""}